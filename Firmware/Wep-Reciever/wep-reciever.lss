
wep-reciever.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000110c  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000110c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  000011a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d90  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125f  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000100f  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d0  00000000  00000000  000062d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000884  00000000  00000000  000068a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001eaf  00000000  00000000  0000712c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00008fdb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
       c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      1c:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <__vector_7>
      20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      44:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_17>
      48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
      a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	ae 30       	cpi	r26, 0x0E	; 14
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <main>
      cc:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_exit>

000000d0 <__bad_interrupt>:
      d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <batmon_init>:
#include <util/delay.h>

/* Riistvaraprojekt UT 2020/21 - Rando Hinn, vastuvõtjamooduli akuhalduse setup & SOC lugemine */


uint8_t batmon_init() {
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	00 d0       	rcall	.+0      	; 0xe0 <batmon_init+0xc>
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1 << DDD0);
      e4:	50 98       	cbi	0x0a, 0	; 10
	DDRD &= ~(1 << DDD1);
      e6:	51 98       	cbi	0x0a, 1	; 10

	i2c_init(20000L);
      e8:	60 e2       	ldi	r22, 0x20	; 32
      ea:	7e e4       	ldi	r23, 0x4E	; 78
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 02 04 	call	0x804	; 0x804 <i2c_init>

	uint8_t subCommandMSB = (BQ27441_CONTROL_DEVICE_TYPE >> 8);
	uint8_t subCommandLSB = (BQ27441_CONTROL_DEVICE_TYPE & 0x00FF);
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
	uint8_t data[2] = {0, 0};
      f4:	19 82       	std	Y+1, r1	; 0x01
      f6:	1a 82       	std	Y+2, r1	; 0x02
	
	uint8_t status = i2c_start(0xAA);
      f8:	8a ea       	ldi	r24, 0xAA	; 170
      fa:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
	if(!status) {
      fe:	88 23       	and	r24, r24
     100:	49 f0       	breq	.+18     	; 0x114 <batmon_init+0x40>
		uint16_t devt = ((uint16_t)data[1] << 8) | data[0];
		if(devt == 0x0421) {
			return 1;
		} 
	} 
	return 0;
     102:	80 e0       	ldi	r24, 0x00	; 0
}
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	0f 91       	pop	r16
     10e:	ff 90       	pop	r15
     110:	ef 90       	pop	r14
     112:	08 95       	ret
	uint8_t command[2] = {subCommandLSB, subCommandMSB};
	uint8_t data[2] = {0, 0};
	
	uint8_t status = i2c_start(0xAA);
	if(!status) {
		i2c_write(0x00);
     114:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_write(command[0]);
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_write(command[1]);
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_stop();
     124:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>

		i2c_read_multiple(0xAA,0xAB,0x00,2,0,data);
     128:	ce 01       	movw	r24, r28
     12a:	01 96       	adiw	r24, 0x01	; 1
     12c:	7c 01       	movw	r14, r24
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	22 e0       	ldi	r18, 0x02	; 2
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	6b ea       	ldi	r22, 0xAB	; 171
     136:	8a ea       	ldi	r24, 0xAA	; 170
     138:	0e 94 72 04 	call	0x8e4	; 0x8e4 <i2c_read_multiple>

		uint16_t devt = ((uint16_t)data[1] << 8) | data[0];
		if(devt == 0x0421) {
			return 1;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	29 81       	ldd	r18, Y+1	; 0x01
     140:	3a 81       	ldd	r19, Y+2	; 0x02
     142:	21 32       	cpi	r18, 0x21	; 33
     144:	34 40       	sbci	r19, 0x04	; 4
     146:	e9 f6       	brne	.-70     	; 0x102 <batmon_init+0x2e>
		} 
	} 
	return 0;
}
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	0f 91       	pop	r16
     152:	ff 90       	pop	r15
     154:	ef 90       	pop	r14
     156:	08 95       	ret

00000158 <batmon_config>:

uint8_t batmon_config(uint16_t dcap) {
     158:	df 92       	push	r13
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	00 d0       	rcall	.+0      	; 0x168 <batmon_config+0x10>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	18 2f       	mov	r17, r24
     16e:	d9 2e       	mov	r13, r25
	uint8_t status = i2c_start(0xAA);
     170:	8a ea       	ldi	r24, 0xAA	; 170
     172:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
	if(!status) {
     176:	88 23       	and	r24, r24
     178:	59 f0       	breq	.+22     	; 0x190 <batmon_config+0x38>

            }
		}
	}
	return 1;
}
     17a:	81 e0       	ldi	r24, 0x01	; 1
     17c:	0f 90       	pop	r0
     17e:	0f 90       	pop	r0
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	08 95       	ret

uint8_t batmon_config(uint16_t dcap) {
	uint8_t status = i2c_start(0xAA);
	if(!status) {
        // UNSEAL IC
		i2c_write(0x00);
     190:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_write(BQ27441_UNSEAL_KEY & 0x00FF);
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_write((BQ27441_UNSEAL_KEY & 0xFF00) >> 8);
     19a:	80 e8       	ldi	r24, 0x80	; 128
     19c:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_write(0x00);
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_write(BQ27441_UNSEAL_KEY& 0x00FF);
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_write((BQ27441_UNSEAL_KEY & 0xFF00) >> 8);
     1ac:	80 e8       	ldi	r24, 0x80	; 128
     1ae:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
		i2c_stop();
     1b2:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
        
		uint8_t stat = i2c_start(0xAA);
     1b6:	8a ea       	ldi	r24, 0xAA	; 170
     1b8:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
		if(!stat) {
     1bc:	81 11       	cpse	r24, r1
     1be:	dd cf       	rjmp	.-70     	; 0x17a <batmon_config+0x22>
        
            // Läheme CFGUPDATE OLEKUSSE
			i2c_write(0x00);
     1c0:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
			i2c_write(0x13);
     1c4:	83 e1       	ldi	r24, 0x13	; 19
     1c6:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
			i2c_write(0x00);
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
            i2c_stop();
     1d0:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>

            uint8_t data[2] = {0, 0};
     1d4:	19 82       	std	Y+1, r1	; 0x01
     1d6:	1a 82       	std	Y+2, r1	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1d8:	2f ef       	ldi	r18, 0xFF	; 255
     1da:	83 ed       	ldi	r24, 0xD3	; 211
     1dc:	90 e3       	ldi	r25, 0x30	; 48
     1de:	21 50       	subi	r18, 0x01	; 1
     1e0:	80 40       	sbci	r24, 0x00	; 0
     1e2:	90 40       	sbci	r25, 0x00	; 0
     1e4:	e1 f7       	brne	.-8      	; 0x1de <batmon_config+0x86>
     1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <batmon_config+0x90>
     1e8:	00 00       	nop
            _delay_ms(1000);

            i2c_read_multiple(0xAA,0xAB,0x06,2,0,data);
     1ea:	ce 01       	movw	r24, r28
     1ec:	01 96       	adiw	r24, 0x01	; 1
     1ee:	7c 01       	movw	r14, r24
     1f0:	00 e0       	ldi	r16, 0x00	; 0
     1f2:	22 e0       	ldi	r18, 0x02	; 2
     1f4:	46 e0       	ldi	r20, 0x06	; 6
     1f6:	6b ea       	ldi	r22, 0xAB	; 171
     1f8:	8a ea       	ldi	r24, 0xAA	; 170
     1fa:	0e 94 72 04 	call	0x8e4	; 0x8e4 <i2c_read_multiple>
            if(data[0] & (1 << 4)) {
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	84 ff       	sbrs	r24, 4
     202:	bb cf       	rjmp	.-138    	; 0x17a <batmon_config+0x22>
                // Enable block data memory control
                i2c_start(0xAA);
     204:	8a ea       	ldi	r24, 0xAA	; 170
     206:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                i2c_write(0x61);
     20a:	81 e6       	ldi	r24, 0x61	; 97
     20c:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                i2c_write(0x00);
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                i2c_stop();
     216:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
                
                // Ligipääs Design Capacity'le
                i2c_start(0xAA);
     21a:	8a ea       	ldi	r24, 0xAA	; 170
     21c:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                i2c_write(0x3E);
     220:	8e e3       	ldi	r24, 0x3E	; 62
     222:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                i2c_write(0x52);
     226:	82 e5       	ldi	r24, 0x52	; 82
     228:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                i2c_stop();
     22c:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
                
                // Kirjutame offseti
                i2c_start(0xAA);
     230:	8a ea       	ldi	r24, 0xAA	; 170
     232:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                i2c_write(0x3F);
     236:	8f e3       	ldi	r24, 0x3F	; 63
     238:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                i2c_write(0x00);
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                i2c_stop();
     242:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
                
                // Loeme algse checksum'i (TI dokumentatsioon natuke niru siin)
                uint8_t cs = i2c_read_single(0xAA,0xAB,0x60,0);
     246:	20 e0       	ldi	r18, 0x00	; 0
     248:	40 e6       	ldi	r20, 0x60	; 96
     24a:	6b ea       	ldi	r22, 0xAB	; 171
     24c:	8a ea       	ldi	r24, 0xAA	; 170
     24e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <i2c_read_single>
     252:	08 2f       	mov	r16, r24

                if(data[1] == 0xAC) {
     254:	8a 81       	ldd	r24, Y+2	; 0x02
     256:	8c 3a       	cpi	r24, 0xAC	; 172
     258:	09 f0       	breq	.+2      	; 0x25c <batmon_config+0x104>
     25a:	8f cf       	rjmp	.-226    	; 0x17a <batmon_config+0x22>
                    // Loeme design capacity, kirjutame üle
                    data[0] = i2c_read_single(0xAA,0xAB,0x4A,0);
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	4a e4       	ldi	r20, 0x4A	; 74
     260:	6b ea       	ldi	r22, 0xAB	; 171
     262:	8a ea       	ldi	r24, 0xAA	; 170
     264:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <i2c_read_single>
     268:	89 83       	std	Y+1, r24	; 0x01
                    data[1] = i2c_read_single(0xAA,0xAB,0x4B,0);  
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	4b e4       	ldi	r20, 0x4B	; 75
     26e:	6b ea       	ldi	r22, 0xAB	; 171
     270:	8a ea       	ldi	r24, 0xAA	; 170
     272:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <i2c_read_single>
     276:	8a 83       	std	Y+2, r24	; 0x02
                    i2c_start(0xAA);
     278:	8a ea       	ldi	r24, 0xAA	; 170
     27a:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                    i2c_write(0x4a);
     27e:	8a e4       	ldi	r24, 0x4A	; 74
     280:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_write((dcap & 0xFF00)>>8);
     284:	8d 2d       	mov	r24, r13
     286:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_stop();
     28a:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
                    i2c_start(0xAA);
     28e:	8a ea       	ldi	r24, 0xAA	; 170
     290:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                    i2c_write(0x4b);
     294:	8b e4       	ldi	r24, 0x4B	; 75
     296:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_write(dcap & 0x00FF);
     29a:	81 2f       	mov	r24, r17
     29c:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_stop();
     2a0:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
                    // Arvutame uue checksum'i ja kirjutame selle. valem ptk 3.1 https://www.ti.com/lit/ug/sluuac9a/sluuac9a.pdf
                    uint8_t temp = (255 - cs - data[0] - data[1]) % 256;
                    uint8_t newcs = 255- ((temp+((dcap & 0xFF00)>>8)+(dcap & 0x00FF)) % 256);
     2a4:	8f ef       	ldi	r24, 0xFF	; 255
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	80 1b       	sub	r24, r16
     2aa:	91 09       	sbc	r25, r1
     2ac:	29 81       	ldd	r18, Y+1	; 0x01
     2ae:	82 1b       	sub	r24, r18
     2b0:	91 09       	sbc	r25, r1
     2b2:	2a 81       	ldd	r18, Y+2	; 0x02
     2b4:	82 1b       	sub	r24, r18
     2b6:	91 09       	sbc	r25, r1
     2b8:	90 78       	andi	r25, 0x80	; 128
     2ba:	97 fd       	sbrc	r25, 7
     2bc:	2b c0       	rjmp	.+86     	; 0x314 <batmon_config+0x1bc>
     2be:	1d 0d       	add	r17, r13
     2c0:	18 0f       	add	r17, r24
     2c2:	10 95       	com	r17
                    i2c_start(0xAA);
     2c4:	8a ea       	ldi	r24, 0xAA	; 170
     2c6:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                    i2c_write(0x60);
     2ca:	80 e6       	ldi	r24, 0x60	; 96
     2cc:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_write(newcs);
     2d0:	81 2f       	mov	r24, r17
     2d2:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_stop();
     2d6:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
                    // Soft reset & seal
                    i2c_start(0xAA);
     2da:	8a ea       	ldi	r24, 0xAA	; 170
     2dc:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                    i2c_write(0x00);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_write(0x42);
     2e6:	82 e4       	ldi	r24, 0x42	; 66
     2e8:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_write(0x00);
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_stop();
     2f2:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
                    i2c_start(0xAA);
     2f6:	8a ea       	ldi	r24, 0xAA	; 170
     2f8:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
                    i2c_write(0x00);
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_write(0x20);
     302:	80 e2       	ldi	r24, 0x20	; 32
     304:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_write(0x00);
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	0e 94 4d 04 	call	0x89a	; 0x89a <i2c_write>
                    i2c_stop();
     30e:	0e 94 1b 04 	call	0x836	; 0x836 <i2c_stop>
     312:	33 cf       	rjmp	.-410    	; 0x17a <batmon_config+0x22>
                    i2c_write(0x4b);
                    i2c_write(dcap & 0x00FF);
                    i2c_stop();
                    // Arvutame uue checksum'i ja kirjutame selle. valem ptk 3.1 https://www.ti.com/lit/ug/sluuac9a/sluuac9a.pdf
                    uint8_t temp = (255 - cs - data[0] - data[1]) % 256;
                    uint8_t newcs = 255- ((temp+((dcap & 0xFF00)>>8)+(dcap & 0x00FF)) % 256);
     314:	01 97       	sbiw	r24, 0x01	; 1
     316:	9f 6f       	ori	r25, 0xFF	; 255
     318:	01 96       	adiw	r24, 0x01	; 1
     31a:	d1 cf       	rjmp	.-94     	; 0x2be <batmon_config+0x166>

0000031c <batmon_soc>:
	return 1;
}

uint8_t batmon_soc() {
    // Loeme state of charge väärtuse
    return i2c_read_single(0xAA,0xAB,0x1C,0);
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	4c e1       	ldi	r20, 0x1C	; 28
     320:	6b ea       	ldi	r22, 0xAB	; 171
     322:	8a ea       	ldi	r24, 0xAA	; 170
     324:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <i2c_read_single>

00000328 <EINK_toggle_reset>:
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, vastuvõtjamooduli eink libra */
/* baseerub matemaatika osas waveshare'i enda libradel, https://github.com/waveshare/e-Paper*/


void EINK_toggle_reset() {
	PORTD &= ~(1 << PD5);
     328:	5d 98       	cbi	0x0b, 5	; 11
     32a:	8f e3       	ldi	r24, 0x3F	; 63
     32c:	9c e9       	ldi	r25, 0x9C	; 156
     32e:	01 97       	sbiw	r24, 0x01	; 1
     330:	f1 f7       	brne	.-4      	; 0x32e <EINK_toggle_reset+0x6>
     332:	00 c0       	rjmp	.+0      	; 0x334 <EINK_toggle_reset+0xc>
     334:	00 00       	nop
	_delay_ms(10);
	PORTD |= (1 << PD5);
     336:	5d 9a       	sbi	0x0b, 5	; 11
     338:	08 95       	ret

0000033a <EINK_set_data>:
}

void EINK_set_data() {
	PORTD |= (1 << PD4);
     33a:	5c 9a       	sbi	0x0b, 4	; 11
     33c:	08 95       	ret

0000033e <EINK_set_command>:
}

void EINK_set_command() {
	PORTD &= ~(1 << PD4);
     33e:	5c 98       	cbi	0x0b, 4	; 11
     340:	08 95       	ret

00000342 <EINK_send_command>:
}

void EINK_send_command(unsigned char command) {
     342:	cf 93       	push	r28
     344:	c8 2f       	mov	r28, r24
void EINK_set_data() {
	PORTD |= (1 << PD4);
}

void EINK_set_command() {
	PORTD &= ~(1 << PD4);
     346:	5c 98       	cbi	0x0b, 4	; 11
}

void EINK_send_command(unsigned char command) {
	EINK_set_command();
	SPI_unset_EINK_cs();
     348:	0e 94 f5 06 	call	0xdea	; 0xdea <SPI_unset_EINK_cs>
	SPI_send(command);
     34c:	8c 2f       	mov	r24, r28
     34e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
	SPI_set_EINK_cs();
}
     352:	cf 91       	pop	r28

void EINK_send_command(unsigned char command) {
	EINK_set_command();
	SPI_unset_EINK_cs();
	SPI_send(command);
	SPI_set_EINK_cs();
     354:	0c 94 f7 06 	jmp	0xdee	; 0xdee <SPI_set_EINK_cs>

00000358 <EINK_send_data>:
}

void EINK_send_data(unsigned char data) {
     358:	cf 93       	push	r28
     35a:	c8 2f       	mov	r28, r24
	_delay_ms(10);
	PORTD |= (1 << PD5);
}

void EINK_set_data() {
	PORTD |= (1 << PD4);
     35c:	5c 9a       	sbi	0x0b, 4	; 11
	SPI_set_EINK_cs();
}

void EINK_send_data(unsigned char data) {
	EINK_set_data();
	SPI_unset_EINK_cs();
     35e:	0e 94 f5 06 	call	0xdea	; 0xdea <SPI_unset_EINK_cs>
	SPI_send(data);
     362:	8c 2f       	mov	r24, r28
     364:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
	SPI_set_EINK_cs();
}
     368:	cf 91       	pop	r28

void EINK_send_data(unsigned char data) {
	EINK_set_data();
	SPI_unset_EINK_cs();
	SPI_send(data);
	SPI_set_EINK_cs();
     36a:	0c 94 f7 06 	jmp	0xdee	; 0xdee <SPI_set_EINK_cs>

0000036e <EINK_clear_frame>:
}

void EINK_clear_frame() {
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
	EINK_send_command(DATA_START_TRANSMISSION_1);
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
     378:	8f e3       	ldi	r24, 0x3F	; 63
     37a:	9f e1       	ldi	r25, 0x1F	; 31
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <EINK_clear_frame+0xe>
     380:	00 c0       	rjmp	.+0      	; 0x382 <EINK_clear_frame+0x14>
     382:	00 00       	nop
     384:	c8 ec       	ldi	r28, 0xC8	; 200
     386:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(2);

	for(int i = 0; i < WIDTH * HEIGHT / 8; i++) {
        EINK_send_data(0xFF);  
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
     38e:	21 97       	sbiw	r28, 0x01	; 1

void EINK_clear_frame() {
	EINK_send_command(DATA_START_TRANSMISSION_1);
	_delay_ms(2);

	for(int i = 0; i < WIDTH * HEIGHT / 8; i++) {
     390:	d9 f7       	brne	.-10     	; 0x388 <EINK_clear_frame+0x1a>
     392:	8f e3       	ldi	r24, 0x3F	; 63
     394:	9f e1       	ldi	r25, 0x1F	; 31
     396:	01 97       	sbiw	r24, 0x01	; 1
     398:	f1 f7       	brne	.-4      	; 0x396 <EINK_clear_frame+0x28>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <EINK_clear_frame+0x2e>
     39c:	00 00       	nop
        EINK_send_data(0xFF);  
    } 
	_delay_ms(2);

	EINK_send_command(DATA_START_TRANSMISSION_2);
     39e:	83 e1       	ldi	r24, 0x13	; 19
     3a0:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
     3a4:	8f e3       	ldi	r24, 0x3F	; 63
     3a6:	9f e1       	ldi	r25, 0x1F	; 31
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <EINK_clear_frame+0x3a>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <EINK_clear_frame+0x40>
     3ae:	00 00       	nop
     3b0:	c8 ec       	ldi	r28, 0xC8	; 200
     3b2:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(2);

	for(int i = 0; i < WIDTH * HEIGHT / 8; i++) {
        EINK_send_data(0xFF);  
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
     3ba:	21 97       	sbiw	r28, 0x01	; 1
	_delay_ms(2);

	EINK_send_command(DATA_START_TRANSMISSION_2);
	_delay_ms(2);

	for(int i = 0; i < WIDTH * HEIGHT / 8; i++) {
     3bc:	d9 f7       	brne	.-10     	; 0x3b4 <EINK_clear_frame+0x46>
     3be:	8f e3       	ldi	r24, 0x3F	; 63
     3c0:	9f e1       	ldi	r25, 0x1F	; 31
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <EINK_clear_frame+0x54>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <EINK_clear_frame+0x5a>
     3c8:	00 00       	nop
        EINK_send_data(0xFF);  
    }  
	_delay_ms(2);
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	08 95       	ret

000003d0 <EINK_init>:

void EINK_init() {
	
	epdwidth = WIDTH;
     3d0:	88 e2       	ldi	r24, 0x28	; 40
     3d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <epdwidth>
	
	//RESET PIN
	DDRD |= (1 << DDD5);
     3d6:	55 9a       	sbi	0x0a, 5	; 10
	PORTD |= (1 << PD5);
     3d8:	5d 9a       	sbi	0x0b, 5	; 11
	
	
	// Data/Command pin
	DDRD |= (1 << DDD4);
     3da:	54 9a       	sbi	0x0a, 4	; 10
	
	EINK_send_command(BOOSTER_SOFT_START);
     3dc:	86 e0       	ldi	r24, 0x06	; 6
     3de:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	EINK_send_data(0x17);
     3e2:	87 e1       	ldi	r24, 0x17	; 23
     3e4:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(0x17);
     3e8:	87 e1       	ldi	r24, 0x17	; 23
     3ea:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(0x17);
     3ee:	87 e1       	ldi	r24, 0x17	; 23
     3f0:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_command(POWER_ON);
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
     3fa:	2f ef       	ldi	r18, 0xFF	; 255
     3fc:	87 ea       	ldi	r24, 0xA7	; 167
     3fe:	91 e6       	ldi	r25, 0x61	; 97
     400:	21 50       	subi	r18, 0x01	; 1
     402:	80 40       	sbci	r24, 0x00	; 0
     404:	90 40       	sbci	r25, 0x00	; 0
     406:	e1 f7       	brne	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
     408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     40a:	00 00       	nop
	_delay_ms(2000);
	EINK_send_command(PANEL_SETTING);
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	EINK_send_data(0x8F);
     412:	8f e8       	ldi	r24, 0x8F	; 143
     414:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(0x8F);
     418:	8f e8       	ldi	r24, 0x8F	; 143
     41a:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_command(VCOM_AND_DATA_INTERVAL_SETTING);
     41e:	80 e5       	ldi	r24, 0x50	; 80
     420:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	EINK_send_data(0x37);
     424:	87 e3       	ldi	r24, 0x37	; 55
     426:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_command(RESOLUTION_SETTING);
     42a:	81 e6       	ldi	r24, 0x61	; 97
     42c:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	EINK_send_data(0x68);
     430:	88 e6       	ldi	r24, 0x68	; 104
     432:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(0x00);
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(0xD4);
     43c:	84 ed       	ldi	r24, 0xD4	; 212
     43e:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
     442:	2f ef       	ldi	r18, 0xFF	; 255
     444:	87 ea       	ldi	r24, 0xA7	; 167
     446:	91 e6       	ldi	r25, 0x61	; 97
     448:	21 50       	subi	r18, 0x01	; 1
     44a:	80 40       	sbci	r24, 0x00	; 0
     44c:	90 40       	sbci	r25, 0x00	; 0
     44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     452:	00 00       	nop
     454:	08 95       	ret

00000456 <EINK_display_frame>:
	_delay_ms(2000);
	
}

void EINK_display_frame(unsigned char* frame_buffer_black, unsigned char* frame_buffer_red) {
     456:	ef 92       	push	r14
     458:	ff 92       	push	r15
     45a:	0f 93       	push	r16
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	7c 01       	movw	r14, r24
     464:	8b 01       	movw	r16, r22
	if (frame_buffer_black != NULL) {
     466:	89 2b       	or	r24, r25
     468:	f1 f0       	breq	.+60     	; 0x4a6 <EINK_display_frame+0x50>
        EINK_send_command(DATA_START_TRANSMISSION_1);
     46a:	80 e1       	ldi	r24, 0x10	; 16
     46c:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
     470:	ef e3       	ldi	r30, 0x3F	; 63
     472:	ff e1       	ldi	r31, 0x1F	; 31
     474:	31 97       	sbiw	r30, 0x01	; 1
     476:	f1 f7       	brne	.-4      	; 0x474 <EINK_display_frame+0x1e>
     478:	00 c0       	rjmp	.+0      	; 0x47a <EINK_display_frame+0x24>
     47a:	00 00       	nop
		_delay_ms(2);

        for (int i = 0; i <  epdwidth*HEIGHT/8; i++) {
     47c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
     480:	88 23       	and	r24, r24
     482:	89 f0       	breq	.+34     	; 0x4a6 <EINK_display_frame+0x50>
     484:	c0 e0       	ldi	r28, 0x00	; 0
     486:	d0 e0       	ldi	r29, 0x00	; 0
            EINK_send_data(frame_buffer_black[i]);
     488:	f7 01       	movw	r30, r14
     48a:	81 91       	ld	r24, Z+
     48c:	7f 01       	movw	r14, r30
     48e:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
void EINK_display_frame(unsigned char* frame_buffer_black, unsigned char* frame_buffer_red) {
	if (frame_buffer_black != NULL) {
        EINK_send_command(DATA_START_TRANSMISSION_1);
		_delay_ms(2);

        for (int i = 0; i <  epdwidth*HEIGHT/8; i++) {
     492:	21 96       	adiw	r28, 0x01	; 1
     494:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
     498:	f5 e0       	ldi	r31, 0x05	; 5
     49a:	2f 9f       	mul	r18, r31
     49c:	90 01       	movw	r18, r0
     49e:	11 24       	eor	r1, r1
     4a0:	c2 17       	cp	r28, r18
     4a2:	d3 07       	cpc	r29, r19
     4a4:	8c f3       	brlt	.-30     	; 0x488 <EINK_display_frame+0x32>
     4a6:	8f e3       	ldi	r24, 0x3F	; 63
     4a8:	9f e1       	ldi	r25, 0x1F	; 31
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <EINK_display_frame+0x54>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <EINK_display_frame+0x5a>
     4b0:	00 00       	nop
            EINK_send_data(frame_buffer_black[i]);
        }
    }
	_delay_ms(2);

    if (frame_buffer_red != NULL) {
     4b2:	01 15       	cp	r16, r1
     4b4:	11 05       	cpc	r17, r1
     4b6:	21 f1       	breq	.+72     	; 0x500 <EINK_display_frame+0xaa>
        EINK_send_command(DATA_START_TRANSMISSION_2);
     4b8:	83 e1       	ldi	r24, 0x13	; 19
     4ba:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
     4be:	8f e3       	ldi	r24, 0x3F	; 63
     4c0:	9f e1       	ldi	r25, 0x1F	; 31
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <EINK_display_frame+0x6c>
     4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <EINK_display_frame+0x72>
     4c8:	00 00       	nop
		_delay_ms(2);

        for (int i = 0; i < epdwidth*HEIGHT/8; i++) {
     4ca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
     4ce:	88 23       	and	r24, r24
     4d0:	89 f0       	breq	.+34     	; 0x4f4 <EINK_display_frame+0x9e>
     4d2:	c0 e0       	ldi	r28, 0x00	; 0
     4d4:	d0 e0       	ldi	r29, 0x00	; 0
            EINK_send_data(frame_buffer_red[i]);
     4d6:	f8 01       	movw	r30, r16
     4d8:	81 91       	ld	r24, Z+
     4da:	8f 01       	movw	r16, r30
     4dc:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>

    if (frame_buffer_red != NULL) {
        EINK_send_command(DATA_START_TRANSMISSION_2);
		_delay_ms(2);

        for (int i = 0; i < epdwidth*HEIGHT/8; i++) {
     4e0:	21 96       	adiw	r28, 0x01	; 1
     4e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
     4e6:	f5 e0       	ldi	r31, 0x05	; 5
     4e8:	8f 9f       	mul	r24, r31
     4ea:	c0 01       	movw	r24, r0
     4ec:	11 24       	eor	r1, r1
     4ee:	c8 17       	cp	r28, r24
     4f0:	d9 07       	cpc	r29, r25
     4f2:	8c f3       	brlt	.-30     	; 0x4d6 <EINK_display_frame+0x80>
     4f4:	ef e3       	ldi	r30, 0x3F	; 63
     4f6:	ff e1       	ldi	r31, 0x1F	; 31
     4f8:	31 97       	sbiw	r30, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <EINK_display_frame+0xa2>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <EINK_display_frame+0xa8>
     4fe:	00 00       	nop
            EINK_send_data(frame_buffer_red[i]);
        }
		_delay_ms(2);

    }
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	08 95       	ret

0000050e <EINK_draw_absolute_pixel>:

void EINK_draw_absolute_pixel(unsigned char* image, int x, int y, int colored) {
	if (x < 0 || x >= epdwidth || y < 0 || y >= HEIGHT) { // Partialite jaoks vaja partiali suurust! Muidu overflow
     50e:	77 fd       	sbrc	r23, 7
     510:	29 c0       	rjmp	.+82     	; 0x564 <EINK_draw_absolute_pixel+0x56>
     512:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <epdwidth>
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	6e 17       	cp	r22, r30
     51a:	7f 07       	cpc	r23, r31
     51c:	1c f5       	brge	.+70     	; 0x564 <EINK_draw_absolute_pixel+0x56>
     51e:	48 32       	cpi	r20, 0x28	; 40
     520:	51 05       	cpc	r21, r1
     522:	00 f5       	brcc	.+64     	; 0x564 <EINK_draw_absolute_pixel+0x56>
            image[(x + y * epdwidth) / 8] |= 0x80 >> (x % 8);
        } else {
            image[(x + y * epdwidth) / 8 ] &= ~(0x80 >> (x % 8));
        }
    } else {
        if (colored) {
     524:	23 2b       	or	r18, r19
     526:	f9 f4       	brne	.+62     	; 0x566 <EINK_draw_absolute_pixel+0x58>
            image[(x + y * epdwidth) / 8]  &= ~(0x80 >> (x % 8));
        } else {
            image[(x + y * epdwidth) / 8 ] |= 0x80 >> (x % 8);
     528:	e4 9f       	mul	r30, r20
     52a:	90 01       	movw	r18, r0
     52c:	e5 9f       	mul	r30, r21
     52e:	30 0d       	add	r19, r0
     530:	f4 9f       	mul	r31, r20
     532:	30 0d       	add	r19, r0
     534:	11 24       	eor	r1, r1
     536:	f9 01       	movw	r30, r18
     538:	e6 0f       	add	r30, r22
     53a:	f7 1f       	adc	r31, r23
     53c:	f5 95       	asr	r31
     53e:	e7 95       	ror	r30
     540:	f5 95       	asr	r31
     542:	e7 95       	ror	r30
     544:	f5 95       	asr	r31
     546:	e7 95       	ror	r30
     548:	e8 0f       	add	r30, r24
     54a:	f9 1f       	adc	r31, r25
     54c:	67 70       	andi	r22, 0x07	; 7
     54e:	77 27       	eor	r23, r23
     550:	80 e8       	ldi	r24, 0x80	; 128
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	02 c0       	rjmp	.+4      	; 0x55a <EINK_draw_absolute_pixel+0x4c>
     556:	95 95       	asr	r25
     558:	87 95       	ror	r24
     55a:	6a 95       	dec	r22
     55c:	e2 f7       	brpl	.-8      	; 0x556 <EINK_draw_absolute_pixel+0x48>
     55e:	90 81       	ld	r25, Z
     560:	89 2b       	or	r24, r25
     562:	80 83       	st	Z, r24
     564:	08 95       	ret
        } else {
            image[(x + y * epdwidth) / 8 ] &= ~(0x80 >> (x % 8));
        }
    } else {
        if (colored) {
            image[(x + y * epdwidth) / 8]  &= ~(0x80 >> (x % 8));
     566:	e4 9f       	mul	r30, r20
     568:	90 01       	movw	r18, r0
     56a:	e5 9f       	mul	r30, r21
     56c:	30 0d       	add	r19, r0
     56e:	f4 9f       	mul	r31, r20
     570:	30 0d       	add	r19, r0
     572:	11 24       	eor	r1, r1
     574:	f9 01       	movw	r30, r18
     576:	e6 0f       	add	r30, r22
     578:	f7 1f       	adc	r31, r23
     57a:	f5 95       	asr	r31
     57c:	e7 95       	ror	r30
     57e:	f5 95       	asr	r31
     580:	e7 95       	ror	r30
     582:	f5 95       	asr	r31
     584:	e7 95       	ror	r30
     586:	e8 0f       	add	r30, r24
     588:	f9 1f       	adc	r31, r25
     58a:	67 70       	andi	r22, 0x07	; 7
     58c:	77 27       	eor	r23, r23
     58e:	80 e8       	ldi	r24, 0x80	; 128
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	02 c0       	rjmp	.+4      	; 0x598 <EINK_draw_absolute_pixel+0x8a>
     594:	95 95       	asr	r25
     596:	87 95       	ror	r24
     598:	6a 95       	dec	r22
     59a:	e2 f7       	brpl	.-8      	; 0x594 <EINK_draw_absolute_pixel+0x86>
     59c:	80 95       	com	r24
     59e:	90 81       	ld	r25, Z
     5a0:	89 23       	and	r24, r25
     5a2:	80 83       	st	Z, r24
     5a4:	08 95       	ret

000005a6 <EINK_set_partial_black>:
            image[(x + y * epdwidth) / 8 ] |= 0x80 >> (x % 8);
        }
    }
}

void EINK_set_partial_black(unsigned char* buffer, int x, int y, int w, int l) {
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	ec 01       	movw	r28, r24
     5be:	f6 2e       	mov	r15, r22
     5c0:	5a 01       	movw	r10, r20
     5c2:	e2 2e       	mov	r14, r18
     5c4:	93 2e       	mov	r9, r19
     5c6:	68 01       	movw	r12, r16
	EINK_send_command(PARTIAL_IN);
     5c8:	81 e9       	ldi	r24, 0x91	; 145
     5ca:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	EINK_send_command(PARTIAL_WINDOW);
     5ce:	80 e9       	ldi	r24, 0x90	; 144
     5d0:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>

	EINK_send_data( x & 0xf8); // X on 8 kordne
     5d4:	1f 2d       	mov	r17, r15
     5d6:	18 7f       	andi	r17, 0xF8	; 248
     5d8:	81 2f       	mov	r24, r17
     5da:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(((x&0xf8) + w - 1) | 0x07);
     5de:	8f ef       	ldi	r24, 0xFF	; 255
     5e0:	8e 0d       	add	r24, r14
     5e2:	81 0f       	add	r24, r17
     5e4:	87 60       	ori	r24, 0x07	; 7
     5e6:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>

	EINK_send_data(y >> 8);
     5ea:	8b 2d       	mov	r24, r11
     5ec:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(y & 0xff);
     5f0:	8a 2d       	mov	r24, r10
     5f2:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data((y + l -1) >> 8);
     5f6:	c5 01       	movw	r24, r10
     5f8:	8c 0d       	add	r24, r12
     5fa:	9d 1d       	adc	r25, r13
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	89 2f       	mov	r24, r25
     600:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data((y + l - 1) & 0xff);
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	8c 0d       	add	r24, r12
     608:	8a 0d       	add	r24, r10
     60a:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(0x01);
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
     614:	8f e3       	ldi	r24, 0x3F	; 63
     616:	9f e1       	ldi	r25, 0x1F	; 31
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <EINK_set_partial_black+0x72>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <EINK_set_partial_black+0x78>
     61e:	00 00       	nop
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_1);
     620:	80 e1       	ldi	r24, 0x10	; 16
     622:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
     626:	8e 2d       	mov	r24, r14
     628:	99 2d       	mov	r25, r9
	EINK_send_data((y + l -1) >> 8);
	EINK_send_data((y + l - 1) & 0xff);
	EINK_send_data(0x01);
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_1);
	if (buffer != NULL) {
     62a:	20 97       	sbiw	r28, 0x00	; 0
     62c:	91 f1       	breq	.+100    	; 0x692 <EINK_set_partial_black+0xec>
        for(int i = 0; i < w  / 8 * l; i++) {
     62e:	97 fd       	sbrc	r25, 7
     630:	2e c0       	rjmp	.+92     	; 0x68e <EINK_set_partial_black+0xe8>
     632:	9c 01       	movw	r18, r24
     634:	35 95       	asr	r19
     636:	27 95       	ror	r18
     638:	35 95       	asr	r19
     63a:	27 95       	ror	r18
     63c:	35 95       	asr	r19
     63e:	27 95       	ror	r18
     640:	2c 9d       	mul	r18, r12
     642:	c0 01       	movw	r24, r0
     644:	2d 9d       	mul	r18, r13
     646:	90 0d       	add	r25, r0
     648:	3c 9d       	mul	r19, r12
     64a:	90 0d       	add	r25, r0
     64c:	11 24       	eor	r1, r1
     64e:	18 16       	cp	r1, r24
     650:	19 06       	cpc	r1, r25
     652:	4c f4       	brge	.+18     	; 0x666 <EINK_set_partial_black+0xc0>
     654:	8e 01       	movw	r16, r28
     656:	08 0f       	add	r16, r24
     658:	19 1f       	adc	r17, r25
            EINK_send_data(buffer[i]);  
     65a:	89 91       	ld	r24, Y+
     65c:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data((y + l - 1) & 0xff);
	EINK_send_data(0x01);
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_1);
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
     660:	0c 17       	cp	r16, r28
     662:	1d 07       	cpc	r17, r29
     664:	d1 f7       	brne	.-12     	; 0x65a <EINK_set_partial_black+0xb4>
     666:	8f e3       	ldi	r24, 0x3F	; 63
     668:	9f e1       	ldi	r25, 0x1F	; 31
     66a:	01 97       	sbiw	r24, 0x01	; 1
     66c:	f1 f7       	brne	.-4      	; 0x66a <EINK_set_partial_black+0xc4>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <EINK_set_partial_black+0xca>
     670:	00 00       	nop
        for(int i = 0; i < w  / 8 * l; i++) {
            EINK_send_data(0x00);  
        }  
    }
    _delay_ms(2);
	EINK_send_command(PARTIAL_OUT);  
     672:	82 e9       	ldi	r24, 0x92	; 146
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	0f 91       	pop	r16
     67c:	ff 90       	pop	r15
     67e:	ef 90       	pop	r14
     680:	df 90       	pop	r13
     682:	cf 90       	pop	r12
     684:	bf 90       	pop	r11
     686:	af 90       	pop	r10
     688:	9f 90       	pop	r9
        for(int i = 0; i < w  / 8 * l; i++) {
            EINK_send_data(0x00);  
        }  
    }
    _delay_ms(2);
	EINK_send_command(PARTIAL_OUT);  
     68a:	0c 94 a1 01 	jmp	0x342	; 0x342 <EINK_send_command>
	EINK_send_data((y + l - 1) & 0xff);
	EINK_send_data(0x01);
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_1);
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
     68e:	07 96       	adiw	r24, 0x07	; 7
     690:	d0 cf       	rjmp	.-96     	; 0x632 <EINK_set_partial_black+0x8c>
            EINK_send_data(buffer[i]);  
        }  
    } else {
        for(int i = 0; i < w  / 8 * l; i++) {
     692:	97 fd       	sbrc	r25, 7
     694:	1a c0       	rjmp	.+52     	; 0x6ca <EINK_set_partial_black+0x124>
     696:	95 95       	asr	r25
     698:	87 95       	ror	r24
     69a:	95 95       	asr	r25
     69c:	87 95       	ror	r24
     69e:	95 95       	asr	r25
     6a0:	87 95       	ror	r24
     6a2:	8c 9d       	mul	r24, r12
     6a4:	80 01       	movw	r16, r0
     6a6:	8d 9d       	mul	r24, r13
     6a8:	10 0d       	add	r17, r0
     6aa:	9c 9d       	mul	r25, r12
     6ac:	10 0d       	add	r17, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	10 16       	cp	r1, r16
     6b2:	11 06       	cpc	r1, r17
     6b4:	c4 f6       	brge	.-80     	; 0x666 <EINK_set_partial_black+0xc0>
     6b6:	c0 e0       	ldi	r28, 0x00	; 0
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
            EINK_send_data(0x00);  
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
            EINK_send_data(buffer[i]);  
        }  
    } else {
        for(int i = 0; i < w  / 8 * l; i++) {
     6c0:	21 96       	adiw	r28, 0x01	; 1
     6c2:	c0 17       	cp	r28, r16
     6c4:	d1 07       	cpc	r29, r17
     6c6:	c9 f7       	brne	.-14     	; 0x6ba <EINK_set_partial_black+0x114>
     6c8:	ce cf       	rjmp	.-100    	; 0x666 <EINK_set_partial_black+0xc0>
     6ca:	07 96       	adiw	r24, 0x07	; 7
     6cc:	e4 cf       	rjmp	.-56     	; 0x696 <EINK_set_partial_black+0xf0>

000006ce <EINK_set_partial_red>:
    }
    _delay_ms(2);
	EINK_send_command(PARTIAL_OUT);  
}

void EINK_set_partial_red(unsigned char* buffer, int x, int y, int w, int l) {
     6ce:	9f 92       	push	r9
     6d0:	af 92       	push	r10
     6d2:	bf 92       	push	r11
     6d4:	cf 92       	push	r12
     6d6:	df 92       	push	r13
     6d8:	ef 92       	push	r14
     6da:	ff 92       	push	r15
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	ec 01       	movw	r28, r24
     6e6:	f6 2e       	mov	r15, r22
     6e8:	5a 01       	movw	r10, r20
     6ea:	e2 2e       	mov	r14, r18
     6ec:	93 2e       	mov	r9, r19
     6ee:	68 01       	movw	r12, r16
	EINK_send_command(PARTIAL_IN);
     6f0:	81 e9       	ldi	r24, 0x91	; 145
     6f2:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	EINK_send_command(PARTIAL_WINDOW);
     6f6:	80 e9       	ldi	r24, 0x90	; 144
     6f8:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>

	EINK_send_data( x & 0xf8); // X on 8 kordne
     6fc:	1f 2d       	mov	r17, r15
     6fe:	18 7f       	andi	r17, 0xF8	; 248
     700:	81 2f       	mov	r24, r17
     702:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(((x&0xf8) + w - 1) | 0x07);
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	8e 0d       	add	r24, r14
     70a:	81 0f       	add	r24, r17
     70c:	87 60       	ori	r24, 0x07	; 7
     70e:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>

	EINK_send_data(y >> 8);
     712:	8b 2d       	mov	r24, r11
     714:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(y & 0xff);
     718:	8a 2d       	mov	r24, r10
     71a:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data((y + l -1) >> 8);
     71e:	c5 01       	movw	r24, r10
     720:	8c 0d       	add	r24, r12
     722:	9d 1d       	adc	r25, r13
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	89 2f       	mov	r24, r25
     728:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data((y + l - 1) & 0xff);
     72c:	8f ef       	ldi	r24, 0xFF	; 255
     72e:	8c 0d       	add	r24, r12
     730:	8a 0d       	add	r24, r10
     732:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data(0x01);
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
     73c:	8f e3       	ldi	r24, 0x3F	; 63
     73e:	9f e1       	ldi	r25, 0x1F	; 31
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <EINK_set_partial_red+0x72>
     744:	00 c0       	rjmp	.+0      	; 0x746 <EINK_set_partial_red+0x78>
     746:	00 00       	nop
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_2);
     748:	83 e1       	ldi	r24, 0x13	; 19
     74a:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
     74e:	8e 2d       	mov	r24, r14
     750:	99 2d       	mov	r25, r9
	EINK_send_data((y + l -1) >> 8);
	EINK_send_data((y + l - 1) & 0xff);
	EINK_send_data(0x01);
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_2);
	if (buffer != NULL) {
     752:	20 97       	sbiw	r28, 0x00	; 0
     754:	91 f1       	breq	.+100    	; 0x7ba <EINK_set_partial_red+0xec>
        for(int i = 0; i < w  / 8 * l; i++) {
     756:	97 fd       	sbrc	r25, 7
     758:	2e c0       	rjmp	.+92     	; 0x7b6 <EINK_set_partial_red+0xe8>
     75a:	9c 01       	movw	r18, r24
     75c:	35 95       	asr	r19
     75e:	27 95       	ror	r18
     760:	35 95       	asr	r19
     762:	27 95       	ror	r18
     764:	35 95       	asr	r19
     766:	27 95       	ror	r18
     768:	2c 9d       	mul	r18, r12
     76a:	c0 01       	movw	r24, r0
     76c:	2d 9d       	mul	r18, r13
     76e:	90 0d       	add	r25, r0
     770:	3c 9d       	mul	r19, r12
     772:	90 0d       	add	r25, r0
     774:	11 24       	eor	r1, r1
     776:	18 16       	cp	r1, r24
     778:	19 06       	cpc	r1, r25
     77a:	4c f4       	brge	.+18     	; 0x78e <EINK_set_partial_red+0xc0>
     77c:	8e 01       	movw	r16, r28
     77e:	08 0f       	add	r16, r24
     780:	19 1f       	adc	r17, r25
            EINK_send_data(buffer[i]);  
     782:	89 91       	ld	r24, Y+
     784:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	EINK_send_data((y + l - 1) & 0xff);
	EINK_send_data(0x01);
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_2);
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
     788:	0c 17       	cp	r16, r28
     78a:	1d 07       	cpc	r17, r29
     78c:	d1 f7       	brne	.-12     	; 0x782 <EINK_set_partial_red+0xb4>
     78e:	8f e3       	ldi	r24, 0x3F	; 63
     790:	9f e1       	ldi	r25, 0x1F	; 31
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <EINK_set_partial_red+0xc4>
     796:	00 c0       	rjmp	.+0      	; 0x798 <EINK_set_partial_red+0xca>
     798:	00 00       	nop
        for(int i = 0; i < w  / 8 * l; i++) {
            EINK_send_data(0x00);  
        }  
    }
    _delay_ms(2);
	EINK_send_command(PARTIAL_OUT);  
     79a:	82 e9       	ldi	r24, 0x92	; 146
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	bf 90       	pop	r11
     7ae:	af 90       	pop	r10
     7b0:	9f 90       	pop	r9
        for(int i = 0; i < w  / 8 * l; i++) {
            EINK_send_data(0x00);  
        }  
    }
    _delay_ms(2);
	EINK_send_command(PARTIAL_OUT);  
     7b2:	0c 94 a1 01 	jmp	0x342	; 0x342 <EINK_send_command>
	EINK_send_data((y + l - 1) & 0xff);
	EINK_send_data(0x01);
	_delay_ms(2);
	EINK_send_command(DATA_START_TRANSMISSION_2);
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
     7b6:	07 96       	adiw	r24, 0x07	; 7
     7b8:	d0 cf       	rjmp	.-96     	; 0x75a <EINK_set_partial_red+0x8c>
            EINK_send_data(buffer[i]);  
        }  
    } else {
        for(int i = 0; i < w  / 8 * l; i++) {
     7ba:	97 fd       	sbrc	r25, 7
     7bc:	1a c0       	rjmp	.+52     	; 0x7f2 <EINK_set_partial_red+0x124>
     7be:	95 95       	asr	r25
     7c0:	87 95       	ror	r24
     7c2:	95 95       	asr	r25
     7c4:	87 95       	ror	r24
     7c6:	95 95       	asr	r25
     7c8:	87 95       	ror	r24
     7ca:	8c 9d       	mul	r24, r12
     7cc:	80 01       	movw	r16, r0
     7ce:	8d 9d       	mul	r24, r13
     7d0:	10 0d       	add	r17, r0
     7d2:	9c 9d       	mul	r25, r12
     7d4:	10 0d       	add	r17, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	10 16       	cp	r1, r16
     7da:	11 06       	cpc	r1, r17
     7dc:	c4 f6       	brge	.-80     	; 0x78e <EINK_set_partial_red+0xc0>
     7de:	c0 e0       	ldi	r28, 0x00	; 0
     7e0:	d0 e0       	ldi	r29, 0x00	; 0
            EINK_send_data(0x00);  
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	0e 94 ac 01 	call	0x358	; 0x358 <EINK_send_data>
	if (buffer != NULL) {
        for(int i = 0; i < w  / 8 * l; i++) {
            EINK_send_data(buffer[i]);  
        }  
    } else {
        for(int i = 0; i < w  / 8 * l; i++) {
     7e8:	21 96       	adiw	r28, 0x01	; 1
     7ea:	c0 17       	cp	r28, r16
     7ec:	d1 07       	cpc	r29, r17
     7ee:	c9 f7       	brne	.-14     	; 0x7e2 <EINK_set_partial_red+0x114>
     7f0:	ce cf       	rjmp	.-100    	; 0x78e <EINK_set_partial_red+0xc0>
     7f2:	07 96       	adiw	r24, 0x07	; 7
     7f4:	e4 cf       	rjmp	.-56     	; 0x7be <EINK_set_partial_red+0xf0>

000007f6 <EINK_wait>:
    _delay_ms(2);
	EINK_send_command(PARTIAL_OUT);  
}

void EINK_wait() {
    while(PIND & !(1<<PD3));
     7f6:	89 b1       	in	r24, 0x09	; 9
     7f8:	08 95       	ret

000007fa <_wait_transmission_complete>:
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     7fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7fe:	87 ff       	sbrs	r24, 7
     800:	fc cf       	rjmp	.-8      	; 0x7fa <_wait_transmission_complete>
}
     802:	08 95       	ret

00000804 <i2c_init>:

// Käivitame I2C
void i2c_init(unsigned long clk_hz) {
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
	TWSR = 0;
     808:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = ((F_CPU/clk_hz)-16)/2;
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	74 e2       	ldi	r23, 0x24	; 36
     810:	84 ef       	ldi	r24, 0xF4	; 244
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 4e 08 	call	0x109c	; 0x109c <__udivmodsi4>
     818:	da 01       	movw	r26, r20
     81a:	c9 01       	movw	r24, r18
     81c:	40 97       	sbiw	r24, 0x10	; 16
     81e:	a1 09       	sbc	r26, r1
     820:	b1 09       	sbc	r27, r1
     822:	b6 95       	lsr	r27
     824:	a7 95       	ror	r26
     826:	97 95       	ror	r25
     828:	87 95       	ror	r24
     82a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = (1<<TWEN);
     82e:	84 e0       	ldi	r24, 0x04	; 4
     830:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     834:	08 95       	ret

00000836 <i2c_stop>:
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     836:	84 e9       	ldi	r24, 0x94	; 148
     838:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     83c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     840:	84 fd       	sbrc	r24, 4
     842:	fc cf       	rjmp	.-8      	; 0x83c <i2c_stop+0x6>
}
     844:	08 95       	ret

00000846 <i2c_start>:
// Algatame TWI operatsiooni ja kirjutame seadme aadressi siinile
uint8_t i2c_start(uint8_t address) {
	uint8_t status;
	
	// Saadame TWI stardi ja ootame selle toimumist.
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     846:	94 ea       	ldi	r25, 0xA4	; 164
     848:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     84c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     850:	97 ff       	sbrs	r25, 7
     852:	fc cf       	rjmp	.-8      	; 0x84c <i2c_start+0x6>
	// Saadame TWI stardi ja ootame selle toimumist.
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
	_wait_transmission_complete();
	
	// Loeme TWI staatusest vajaminevad bitid.
	status = TW_STATUS & 0xF8;
     854:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     858:	98 7f       	andi	r25, 0xF8	; 248
	// Kui staatuse kood ei ole START või REP_START
	if((status != TW_START) && (status != TW_REP_START)) {
     85a:	98 30       	cpi	r25, 0x08	; 8
     85c:	21 f0       	breq	.+8      	; 0x866 <i2c_start+0x20>
     85e:	90 31       	cpi	r25, 0x10	; 16
     860:	11 f0       	breq	.+4      	; 0x866 <i2c_start+0x20>
     862:	89 2f       	mov	r24, r25
     864:	08 95       	ret
		return status; // Varajane return
	}
	
	// Kirjutame seadme aadressi siini ja ootame 
	TWDR = address;
     866:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     86a:	84 e8       	ldi	r24, 0x84	; 132
     86c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     870:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     874:	87 ff       	sbrs	r24, 7
     876:	fc cf       	rjmp	.-8      	; 0x870 <i2c_start+0x2a>
	TWDR = address;
	TWCR = (1<<TWINT) | (1<<TWEN);
	_wait_transmission_complete();
	
	// Loeme TWI staatusest vajaminevad bitid.
	status = TW_STATUS & 0xF8;
     878:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     87c:	88 7f       	andi	r24, 0xF8	; 248
	// Kui staatus ei ole seadmelt tagasi tulnud ACK
	if((status != TW_MT_SLA_ACK) && (status != TW_MR_SLA_ACK)) {
     87e:	88 31       	cpi	r24, 0x18	; 24
     880:	51 f0       	breq	.+20     	; 0x896 <i2c_start+0x50>
     882:	80 34       	cpi	r24, 0x40	; 64
     884:	41 f0       	breq	.+16     	; 0x896 <i2c_start+0x50>
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     886:	94 e9       	ldi	r25, 0x94	; 148
     888:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     88c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     890:	94 fd       	sbrc	r25, 4
     892:	fc cf       	rjmp	.-8      	; 0x88c <i2c_start+0x46>
     894:	08 95       	ret
	if((status != TW_MT_SLA_ACK) && (status != TW_MR_SLA_ACK)) {
		i2c_stop();
		return status; // Varajane return
	}
	
	return 0; // Probleeme pole return
     896:	80 e0       	ldi	r24, 0x00	; 0

}
     898:	08 95       	ret

0000089a <i2c_write>:
// Kirjutame siinile andmeid
uint8_t i2c_write(uint8_t data) {
	uint8_t status;
	
	// Kirjutame andmed siinile ja ootame operatsiooni lõppu
	TWDR = data;
     89a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
     89e:	84 e8       	ldi	r24, 0x84	; 132
     8a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     8a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     8a8:	87 ff       	sbrs	r24, 7
     8aa:	fc cf       	rjmp	.-8      	; 0x8a4 <i2c_write+0xa>
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN);
	_wait_transmission_complete();
	
	// Loeme TWI staatusest vajaminevad bitid.
	status = TW_STATUS & 0xF8;
     8ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     8b0:	88 7f       	andi	r24, 0xF8	; 248
	// Kui seade ei tagastanud ACK
	if(status != TW_MT_DATA_ACK) {
     8b2:	88 32       	cpi	r24, 0x28	; 40
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <i2c_write+0x1e>
		return status; // Varajane return
	}
	
	return 0; // Probleeme pole return
}
     8b6:	08 95       	ret
	// Kui seade ei tagastanud ACK
	if(status != TW_MT_DATA_ACK) {
		return status; // Varajane return
	}
	
	return 0; // Probleeme pole return
     8b8:	80 e0       	ldi	r24, 0x00	; 0
}
     8ba:	08 95       	ret

000008bc <i2c_read_nack>:

// Loeme ilma mikrokontrolleripoolset ACK'i tagastamata - tüüpiliselt viimase (või ainsa ühekordse) baidi lugemiseks
uint8_t i2c_read_nack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN);
     8bc:	84 e8       	ldi	r24, 0x84	; 132
     8be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     8c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     8c6:	87 ff       	sbrs	r24, 7
     8c8:	fc cf       	rjmp	.-8      	; 0x8c2 <i2c_read_nack+0x6>
uint8_t i2c_read_nack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN);
	_wait_transmission_complete();
	
	return TWDR;
     8ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     8ce:	08 95       	ret

000008d0 <i2c_read_ack>:

// Loeme ilma mikrokontrolleripoolset ACK'i tagastades - tüüpiliselt annab seadmele märku, et prosele võib saata veel baite
uint8_t i2c_read_ack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN) | (1 << TWEA);
     8d0:	84 ec       	ldi	r24, 0xC4	; 196
     8d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     8d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     8da:	87 ff       	sbrs	r24, 7
     8dc:	fc cf       	rjmp	.-8      	; 0x8d6 <i2c_read_ack+0x6>
uint8_t i2c_read_ack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN) | (1 << TWEA);
	_wait_transmission_complete();
	
	return TWDR;
     8de:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
     8e2:	08 95       	ret

000008e4 <i2c_read_multiple>:

// Loeb siinilt andmeid seadme mingist registrist n_bytes jagu ja kirjutab result'i. ACK jälgib spec'i, kus viimast baiti ei ACK'ita, repstart määrab, kas vahepeal tekitatakse stop või mitte. 
void i2c_read_multiple(uint8_t write_address, uint8_t read_address, uint8_t register_address, uint8_t n_bytes, uint8_t repstart, uint8_t * result) {	
     8e4:	ef 92       	push	r14
     8e6:	ff 92       	push	r15
     8e8:	0f 93       	push	r16
     8ea:	1f 93       	push	r17
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	16 2f       	mov	r17, r22
     8f2:	d4 2f       	mov	r29, r20
     8f4:	c2 2f       	mov	r28, r18
	uint8_t status = i2c_start(write_address);
     8f6:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
	if(!status) {
     8fa:	81 11       	cpse	r24, r1
     8fc:	17 c0       	rjmp	.+46     	; 0x92c <i2c_read_multiple+0x48>
// Kirjutame siinile andmeid
uint8_t i2c_write(uint8_t data) {
	uint8_t status;
	
	// Kirjutame andmed siinile ja ootame operatsiooni lõppu
	TWDR = data;
     8fe:	d0 93 bb 00 	sts	0x00BB, r29	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
     902:	84 e8       	ldi	r24, 0x84	; 132
     904:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     908:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     90c:	87 ff       	sbrs	r24, 7
     90e:	fc cf       	rjmp	.-8      	; 0x908 <i2c_read_multiple+0x24>
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN);
	_wait_transmission_complete();
	
	// Loeme TWI staatusest vajaminevad bitid.
	status = TW_STATUS & 0xF8;
     910:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     914:	88 7f       	andi	r24, 0xF8	; 248
	// Kui seade ei tagastanud ACK
	if(status != TW_MT_DATA_ACK) {
     916:	88 32       	cpi	r24, 0x28	; 40
     918:	b9 f0       	breq	.+46     	; 0x948 <i2c_read_multiple+0x64>
// Loeb siinilt andmeid seadme mingist registrist n_bytes jagu ja kirjutab result'i. ACK jälgib spec'i, kus viimast baiti ei ACK'ita, repstart määrab, kas vahepeal tekitatakse stop või mitte. 
void i2c_read_multiple(uint8_t write_address, uint8_t read_address, uint8_t register_address, uint8_t n_bytes, uint8_t repstart, uint8_t * result) {	
	uint8_t status = i2c_start(write_address);
	if(!status) {
		status = i2c_write(register_address);
		if(!status) {
     91a:	88 23       	and	r24, r24
     91c:	a9 f0       	breq	.+42     	; 0x948 <i2c_read_multiple+0x64>
			i2c_stop();
		}	
	} else {
		i2c_stop();
	}
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	ff 90       	pop	r15
     928:	ef 90       	pop	r14
     92a:	08 95       	ret
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     92c:	84 e9       	ldi	r24, 0x94	; 148
     92e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     932:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     936:	84 fd       	sbrc	r24, 4
     938:	fc cf       	rjmp	.-8      	; 0x932 <i2c_read_multiple+0x4e>
			i2c_stop();
		}	
	} else {
		i2c_stop();
	}
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	1f 91       	pop	r17
     940:	0f 91       	pop	r16
     942:	ff 90       	pop	r15
     944:	ef 90       	pop	r14
     946:	08 95       	ret
void i2c_read_multiple(uint8_t write_address, uint8_t read_address, uint8_t register_address, uint8_t n_bytes, uint8_t repstart, uint8_t * result) {	
	uint8_t status = i2c_start(write_address);
	if(!status) {
		status = i2c_write(register_address);
		if(!status) {
			if(!repstart) {
     948:	00 23       	and	r16, r16
     94a:	a1 f1       	breq	.+104    	; 0x9b4 <i2c_read_multiple+0xd0>
				i2c_stop();
			}
			status = i2c_start(read_address);
     94c:	81 2f       	mov	r24, r17
     94e:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
			for(uint8_t i = 0; i < n_bytes; i++) {
     952:	cc 23       	and	r28, r28
     954:	d1 f0       	breq	.+52     	; 0x98a <i2c_read_multiple+0xa6>
     956:	4c 2f       	mov	r20, r28
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	41 50       	subi	r20, 0x01	; 1
     95c:	51 09       	sbc	r21, r1
     95e:	f7 01       	movw	r30, r14
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
}

// Loeme ilma mikrokontrolleripoolset ACK'i tagastades - tüüpiliselt annab seadmele märku, et prosele võib saata veel baite
uint8_t i2c_read_ack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN) | (1 << TWEA);
     964:	94 ec       	ldi	r25, 0xC4	; 196
}

// Loeme ilma mikrokontrolleripoolset ACK'i tagastamata - tüüpiliselt viimase (või ainsa ühekordse) baidi lugemiseks
uint8_t i2c_read_nack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN);
     966:	64 e8       	ldi	r22, 0x84	; 132
			if(!repstart) {
				i2c_stop();
			}
			status = i2c_start(read_address);
			for(uint8_t i = 0; i < n_bytes; i++) {
				if(i == n_bytes-1) {
     968:	24 17       	cp	r18, r20
     96a:	35 07       	cpc	r19, r21
     96c:	e1 f0       	breq	.+56     	; 0x9a6 <i2c_read_multiple+0xc2>
}

// Loeme ilma mikrokontrolleripoolset ACK'i tagastades - tüüpiliselt annab seadmele märku, et prosele võib saata veel baite
uint8_t i2c_read_ack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN) | (1 << TWEA);
     96e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     972:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     976:	87 ff       	sbrs	r24, 7
     978:	fc cf       	rjmp	.-8      	; 0x972 <i2c_read_multiple+0x8e>
uint8_t i2c_read_ack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN) | (1 << TWEA);
	_wait_transmission_complete();
	
	return TWDR;
     97a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
			status = i2c_start(read_address);
			for(uint8_t i = 0; i < n_bytes; i++) {
				if(i == n_bytes-1) {
					result[i] = i2c_read_nack();
				} else {
					result[i] = i2c_read_ack();
     97e:	80 83       	st	Z, r24
     980:	2f 5f       	subi	r18, 0xFF	; 255
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	31 96       	adiw	r30, 0x01	; 1
		if(!status) {
			if(!repstart) {
				i2c_stop();
			}
			status = i2c_start(read_address);
			for(uint8_t i = 0; i < n_bytes; i++) {
     986:	2c 17       	cp	r18, r28
     988:	78 f3       	brcs	.-34     	; 0x968 <i2c_read_multiple+0x84>
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     98a:	84 e9       	ldi	r24, 0x94	; 148
     98c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     990:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     994:	84 fd       	sbrc	r24, 4
     996:	fc cf       	rjmp	.-8      	; 0x990 <i2c_read_multiple+0xac>
			i2c_stop();
		}	
	} else {
		i2c_stop();
	}
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	08 95       	ret
}

// Loeme ilma mikrokontrolleripoolset ACK'i tagastamata - tüüpiliselt viimase (või ainsa ühekordse) baidi lugemiseks
uint8_t i2c_read_nack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN);
     9a6:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     9aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9ae:	87 ff       	sbrs	r24, 7
     9b0:	fc cf       	rjmp	.-8      	; 0x9aa <i2c_read_multiple+0xc6>
     9b2:	e3 cf       	rjmp	.-58     	; 0x97a <i2c_read_multiple+0x96>
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     9b4:	84 e9       	ldi	r24, 0x94	; 148
     9b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     9ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9be:	84 fd       	sbrc	r24, 4
     9c0:	fc cf       	rjmp	.-8      	; 0x9ba <i2c_read_multiple+0xd6>
     9c2:	c4 cf       	rjmp	.-120    	; 0x94c <i2c_read_multiple+0x68>

000009c4 <i2c_read_single>:
		i2c_stop();
	}
}

// Loeme siinile üksiku baidi andmeid seadme mingist registrist. Ack parameetriga saab seadistada, kas ack tekitatakse või mitte. 
uint8_t i2c_read_single(uint8_t write_address, uint8_t read_address, uint8_t register_address, uint8_t ack) {
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	d6 2f       	mov	r29, r22
     9cc:	c4 2f       	mov	r28, r20
     9ce:	12 2f       	mov	r17, r18
	uint8_t status = i2c_start(write_address);
     9d0:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
	if(!status) {
     9d4:	81 11       	cpse	r24, r1
     9d6:	1b c0       	rjmp	.+54     	; 0xa0e <__DATA_REGION_LENGTH__+0xe>
// Kirjutame siinile andmeid
uint8_t i2c_write(uint8_t data) {
	uint8_t status;
	
	// Kirjutame andmed siinile ja ootame operatsiooni lõppu
	TWDR = data;
     9d8:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN);
     9dc:	84 e8       	ldi	r24, 0x84	; 132
     9de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     9e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9e6:	87 ff       	sbrs	r24, 7
     9e8:	fc cf       	rjmp	.-8      	; 0x9e2 <i2c_read_single+0x1e>
	TWDR = data;
	TWCR = (1 << TWINT) | (1 << TWEN);
	_wait_transmission_complete();
	
	// Loeme TWI staatusest vajaminevad bitid.
	status = TW_STATUS & 0xF8;
     9ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     9ee:	88 7f       	andi	r24, 0xF8	; 248
	// Kui seade ei tagastanud ACK
	if(status != TW_MT_DATA_ACK) {
     9f0:	88 32       	cpi	r24, 0x28	; 40
     9f2:	c1 f0       	breq	.+48     	; 0xa24 <__DATA_REGION_LENGTH__+0x24>
// Loeme siinile üksiku baidi andmeid seadme mingist registrist. Ack parameetriga saab seadistada, kas ack tekitatakse või mitte. 
uint8_t i2c_read_single(uint8_t write_address, uint8_t read_address, uint8_t register_address, uint8_t ack) {
	uint8_t status = i2c_start(write_address);
	if(!status) {
		status = i2c_write(register_address);
		if(! status) {
     9f4:	88 23       	and	r24, r24
     9f6:	b1 f0       	breq	.+44     	; 0xa24 <__DATA_REGION_LENGTH__+0x24>
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     9f8:	94 e9       	ldi	r25, 0x94	; 148
     9fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     9fe:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a02:	94 fd       	sbrc	r25, 4
     a04:	fc cf       	rjmp	.-8      	; 0x9fe <i2c_read_single+0x3a>
		
	} else {
		i2c_stop();
	}
	return status;
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	08 95       	ret
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     a0e:	94 e9       	ldi	r25, 0x94	; 148
     a10:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     a14:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a18:	94 fd       	sbrc	r25, 4
     a1a:	fc cf       	rjmp	.-8      	; 0xa14 <__DATA_REGION_LENGTH__+0x14>
		
	} else {
		i2c_stop();
	}
	return status;
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	08 95       	ret
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     a24:	84 e9       	ldi	r24, 0x94	; 148
     a26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     a2a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a2e:	84 fd       	sbrc	r24, 4
     a30:	fc cf       	rjmp	.-8      	; 0xa2a <__DATA_REGION_LENGTH__+0x2a>
	if(!status) {
		status = i2c_write(register_address);
		if(! status) {
			i2c_stop();
			
			status = i2c_start(read_address);
     a32:	8d 2f       	mov	r24, r29
     a34:	0e 94 23 04 	call	0x846	; 0x846 <i2c_start>
			if(!status) {
     a38:	81 11       	cpse	r24, r1
     a3a:	e5 cf       	rjmp	.-54     	; 0xa06 <__DATA_REGION_LENGTH__+0x6>
				uint8_t reading;
				if(ack) {
     a3c:	11 23       	and	r17, r17
     a3e:	a1 f0       	breq	.+40     	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
}

// Loeme ilma mikrokontrolleripoolset ACK'i tagastades - tüüpiliselt annab seadmele märku, et prosele võib saata veel baite
uint8_t i2c_read_ack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN) | (1 << TWEA);
     a40:	84 ec       	ldi	r24, 0xC4	; 196
     a42:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     a46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a4a:	87 ff       	sbrs	r24, 7
     a4c:	fc cf       	rjmp	.-8      	; 0xa46 <__DATA_REGION_LENGTH__+0x46>
uint8_t i2c_read_nack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN);
	_wait_transmission_complete();
	
	return TWDR;
     a4e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN);
}

// Tõstatame STOP ja ootame siini vabastamist
void i2c_stop() {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     a52:	94 e9       	ldi	r25, 0x94	; 148
     a54:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));
     a58:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a5c:	94 fd       	sbrc	r25, 4
     a5e:	fc cf       	rjmp	.-8      	; 0xa58 <__DATA_REGION_LENGTH__+0x58>
		
	} else {
		i2c_stop();
	}
	return status;
}
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	08 95       	ret
}

// Loeme ilma mikrokontrolleripoolset ACK'i tagastamata - tüüpiliselt viimase (või ainsa ühekordse) baidi lugemiseks
uint8_t i2c_read_nack() {
	
	TWCR = (1<<TWINT)|(1<<TWEN);
     a68:	84 e8       	ldi	r24, 0x84	; 132
     a6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, i2C libra */


// Ootame kuni siinil on suhtlus toimunud
void _wait_transmission_complete() {
	while (!(TWCR & (1<<TWINT)));
     a6e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     a72:	87 ff       	sbrs	r24, 7
     a74:	fc cf       	rjmp	.-8      	; 0xa6e <__DATA_REGION_LENGTH__+0x6e>
     a76:	eb cf       	rjmp	.-42     	; 0xa4e <__DATA_REGION_LENGTH__+0x4e>

00000a78 <__vector_7>:

volatile uint8_t data[10];
volatile uint8_t data_available = 0;
uint16_t tc = 0;

ISR(INT6_vect) {
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	2f 93       	push	r18
     a84:	3f 93       	push	r19
     a86:	4f 93       	push	r20
     a88:	5f 93       	push	r21
     a8a:	6f 93       	push	r22
     a8c:	7f 93       	push	r23
     a8e:	8f 93       	push	r24
     a90:	9f 93       	push	r25
     a92:	af 93       	push	r26
     a94:	bf 93       	push	r27
     a96:	ef 93       	push	r30
     a98:	ff 93       	push	r31
    if(data_available == 0) {
     a9a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data_available>
     a9e:	81 11       	cpse	r24, r1
     aa0:	09 c0       	rjmp	.+18     	; 0xab4 <__vector_7+0x3c>
        nrf24l01_read_register(R_RX_PAYLOAD, (uint8_t*) data,10);
     aa2:	4a e0       	ldi	r20, 0x0A	; 10
     aa4:	64 e0       	ldi	r22, 0x04	; 4
     aa6:	71 e0       	ldi	r23, 0x01	; 1
     aa8:	81 e6       	ldi	r24, 0x61	; 97
     aaa:	0e 94 af 06 	call	0xd5e	; 0xd5e <nrf24l01_read_register>
        data_available = 1;
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <data_available>
    }
}
     ab4:	ff 91       	pop	r31
     ab6:	ef 91       	pop	r30
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <clean_buffer>:

// Opereerib etteantaval eraldiseisval puhvril, seetõttu ei paikne EINK libraga koos. 
void clean_buffer(uint8_t* buffer) {
     ad6:	af 92       	push	r10
     ad8:	bf 92       	push	r11
     ada:	cf 92       	push	r12
     adc:	df 92       	push	r13
     ade:	ef 92       	push	r14
     ae0:	ff 92       	push	r15
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	7c 01       	movw	r14, r24
    for(uint8_t x = 0; x < epdwidth; x++) {
     aec:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
     af0:	22 23       	and	r18, r18
     af2:	a9 f0       	breq	.+42     	; 0xb1e <__stack+0x1f>
     af4:	d1 2c       	mov	r13, r1
     af6:	0d 2d       	mov	r16, r13
     af8:	10 e0       	ldi	r17, 0x00	; 0
     afa:	c0 e0       	ldi	r28, 0x00	; 0
     afc:	d0 e0       	ldi	r29, 0x00	; 0
        for (uint8_t y = 0; y < HEIGHT; y++) {
            EINK_draw_absolute_pixel(buffer,x,y,0);
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	ae 01       	movw	r20, r28
     b04:	b8 01       	movw	r22, r16
     b06:	c7 01       	movw	r24, r14
     b08:	0e 94 87 02 	call	0x50e	; 0x50e <EINK_draw_absolute_pixel>
     b0c:	21 96       	adiw	r28, 0x01	; 1
}

// Opereerib etteantaval eraldiseisval puhvril, seetõttu ei paikne EINK libraga koos. 
void clean_buffer(uint8_t* buffer) {
    for(uint8_t x = 0; x < epdwidth; x++) {
        for (uint8_t y = 0; y < HEIGHT; y++) {
     b0e:	c8 32       	cpi	r28, 0x28	; 40
     b10:	d1 05       	cpc	r29, r1
     b12:	a9 f7       	brne	.-22     	; 0xafe <clean_buffer+0x28>
    }
}

// Opereerib etteantaval eraldiseisval puhvril, seetõttu ei paikne EINK libraga koos. 
void clean_buffer(uint8_t* buffer) {
    for(uint8_t x = 0; x < epdwidth; x++) {
     b14:	d3 94       	inc	r13
     b16:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
     b1a:	d2 16       	cp	r13, r18
     b1c:	60 f3       	brcs	.-40     	; 0xaf6 <clean_buffer+0x20>
        for (uint8_t y = 0; y < HEIGHT; y++) {
            EINK_draw_absolute_pixel(buffer,x,y,0);
        }
    }
    for(int i = 0; i < 122/epdwidth; i++) {
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	8a e7       	ldi	r24, 0x7A	; 122
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	b9 01       	movw	r22, r18
     b26:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divmodhi4>
     b2a:	67 2b       	or	r22, r23
     b2c:	b9 f1       	breq	.+110    	; 0xb9c <__stack+0x9d>
     b2e:	c1 2c       	mov	r12, r1
     b30:	d1 2c       	mov	r13, r1
     b32:	8a e7       	ldi	r24, 0x7A	; 122
     b34:	a8 2e       	mov	r10, r24
     b36:	b1 2c       	mov	r11, r1
     b38:	c0 e0       	ldi	r28, 0x00	; 0
     b3a:	d0 e0       	ldi	r29, 0x00	; 0
     b3c:	03 c0       	rjmp	.+6      	; 0xb44 <__stack+0x45>
     b3e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
     b42:	30 e0       	ldi	r19, 0x00	; 0
        for(int j = 0; j < 250/HEIGHT; j++) {
            EINK_set_partial_red(buffer, i*epdwidth,j*HEIGHT, epdwidth,HEIGHT);
     b44:	2c 9d       	mul	r18, r12
     b46:	b0 01       	movw	r22, r0
     b48:	2d 9d       	mul	r18, r13
     b4a:	70 0d       	add	r23, r0
     b4c:	3c 9d       	mul	r19, r12
     b4e:	70 0d       	add	r23, r0
     b50:	11 24       	eor	r1, r1
     b52:	08 e2       	ldi	r16, 0x28	; 40
     b54:	10 e0       	ldi	r17, 0x00	; 0
     b56:	ae 01       	movw	r20, r28
     b58:	c7 01       	movw	r24, r14
     b5a:	0e 94 67 03 	call	0x6ce	; 0x6ce <EINK_set_partial_red>
            EINK_set_partial_black(buffer, i*epdwidth,j*HEIGHT, epdwidth,HEIGHT);
     b5e:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	2c 9d       	mul	r18, r12
     b66:	b0 01       	movw	r22, r0
     b68:	2d 9d       	mul	r18, r13
     b6a:	70 0d       	add	r23, r0
     b6c:	3c 9d       	mul	r19, r12
     b6e:	70 0d       	add	r23, r0
     b70:	11 24       	eor	r1, r1
     b72:	ae 01       	movw	r20, r28
     b74:	c7 01       	movw	r24, r14
     b76:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <EINK_set_partial_black>
     b7a:	a8 96       	adiw	r28, 0x28	; 40
        for (uint8_t y = 0; y < HEIGHT; y++) {
            EINK_draw_absolute_pixel(buffer,x,y,0);
        }
    }
    for(int i = 0; i < 122/epdwidth; i++) {
        for(int j = 0; j < 250/HEIGHT; j++) {
     b7c:	c0 3f       	cpi	r28, 0xF0	; 240
     b7e:	d1 05       	cpc	r29, r1
     b80:	f1 f6       	brne	.-68     	; 0xb3e <__stack+0x3f>
    for(uint8_t x = 0; x < epdwidth; x++) {
        for (uint8_t y = 0; y < HEIGHT; y++) {
            EINK_draw_absolute_pixel(buffer,x,y,0);
        }
    }
    for(int i = 0; i < 122/epdwidth; i++) {
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	c8 1a       	sub	r12, r24
     b86:	d8 0a       	sbc	r13, r24
     b88:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	c5 01       	movw	r24, r10
     b90:	b9 01       	movw	r22, r18
     b92:	0e 94 3a 08 	call	0x1074	; 0x1074 <__divmodhi4>
     b96:	c6 16       	cp	r12, r22
     b98:	d7 06       	cpc	r13, r23
     b9a:	74 f2       	brlt	.-100    	; 0xb38 <__stack+0x39>
        for(int j = 0; j < 250/HEIGHT; j++) {
            EINK_set_partial_red(buffer, i*epdwidth,j*HEIGHT, epdwidth,HEIGHT);
            EINK_set_partial_black(buffer, i*epdwidth,j*HEIGHT, epdwidth,HEIGHT);
        }
    }
}
     b9c:	df 91       	pop	r29
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	08 95       	ret

00000bb2 <__vector_17>:


ISR(TIMER1_COMPA_vect) {
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	8f 93       	push	r24
     bbe:	9f 93       	push	r25
    tc++;
     bc0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     bc4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
            set_sleep_mode(SLEEP_MODE_PWR_DOWN);
            sleep_mode();
        }
        tc = 0;
    }
}
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	0f 90       	pop	r0
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	0f 90       	pop	r0
     bdc:	1f 90       	pop	r1
     bde:	18 95       	reti

00000be0 <nrf24l01_write_register>:
#define F_CPU 16000000UL
#include <util/delay.h>

/* Riistvaraprojekt UT 2020/21 - Rando Hinn, vastuvõtjamooduli nrf24l01 raadioside libra */

void nrf24l01_write_register(uint8_t reg, uint8_t* data, uint8_t bytecount) {
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	c8 2f       	mov	r28, r24
     bec:	f6 2e       	mov	r15, r22
     bee:	07 2f       	mov	r16, r23
     bf0:	14 2f       	mov	r17, r20
	reg =  NRF_WRITE | reg;
	SPI_unset_RF_cs();
     bf2:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_unset_RF_cs>
	SPI_send(reg);
     bf6:	8c 2f       	mov	r24, r28
     bf8:	80 62       	ori	r24, 0x20	; 32
     bfa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
	for(int i = 0; i < bytecount; i++) {
     bfe:	11 23       	and	r17, r17
     c00:	61 f0       	breq	.+24     	; 0xc1a <nrf24l01_write_register+0x3a>
     c02:	cf 2d       	mov	r28, r15
     c04:	d0 2f       	mov	r29, r16
     c06:	ce 01       	movw	r24, r28
     c08:	81 0f       	add	r24, r17
     c0a:	91 1d       	adc	r25, r1
     c0c:	8c 01       	movw	r16, r24
		SPI_send(data[i]);
     c0e:	89 91       	ld	r24, Y+
     c10:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>

void nrf24l01_write_register(uint8_t reg, uint8_t* data, uint8_t bytecount) {
	reg =  NRF_WRITE | reg;
	SPI_unset_RF_cs();
	SPI_send(reg);
	for(int i = 0; i < bytecount; i++) {
     c14:	c0 17       	cp	r28, r16
     c16:	d1 07       	cpc	r29, r17
     c18:	d1 f7       	brne	.-12     	; 0xc0e <nrf24l01_write_register+0x2e>
		SPI_send(data[i]);
	}
	SPI_set_RF_cs();
}
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
	SPI_unset_RF_cs();
	SPI_send(reg);
	for(int i = 0; i < bytecount; i++) {
		SPI_send(data[i]);
	}
	SPI_set_RF_cs();
     c24:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <SPI_set_RF_cs>

00000c28 <nrf24l01_init>:
}

void nrf24l01_init(uint8_t address_width, uint8_t* address, uint8_t channel, uint8_t payload_width, uint8_t mode) {
     c28:	bf 92       	push	r11
     c2a:	cf 92       	push	r12
     c2c:	df 92       	push	r13
     c2e:	ef 92       	push	r14
     c30:	ff 92       	push	r15
     c32:	0f 93       	push	r16
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	18 2f       	mov	r17, r24
     c42:	7b 01       	movw	r14, r22
     c44:	b4 2e       	mov	r11, r20
     c46:	c2 2e       	mov	r12, r18

	DDRC |= (1 << DDC7);
     c48:	3f 9a       	sbi	0x07, 7	; 7
	PORTC &= ~(1 << PC7);
     c4a:	47 98       	cbi	0x08, 7	; 8
	
	uint8_t config_values[1];
	
	//Enable Auto-ACK
	config_values[0] = 0x01;
     c4c:	dd 24       	eor	r13, r13
     c4e:	d3 94       	inc	r13
     c50:	d9 82       	std	Y+1, r13	; 0x01
	nrf24l01_write_register(EN_AA, config_values, 1);
     c52:	41 e0       	ldi	r20, 0x01	; 1
     c54:	be 01       	movw	r22, r28
     c56:	6f 5f       	subi	r22, 0xFF	; 255
     c58:	7f 4f       	sbci	r23, 0xFF	; 255
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	
	//Setup automatic retries 750uS delay, up to 15 times
	config_values[0] = 0x2F;
     c60:	8f e2       	ldi	r24, 0x2F	; 47
     c62:	89 83       	std	Y+1, r24	; 0x01
	nrf24l01_write_register(SETUP_RETR, config_values, 1);
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	be 01       	movw	r22, r28
     c68:	6f 5f       	subi	r22, 0xFF	; 255
     c6a:	7f 4f       	sbci	r23, 0xFF	; 255
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	
	//Enable data pipe 0 for recieve communications
	config_values[0] = 0x01;
     c72:	d9 82       	std	Y+1, r13	; 0x01
	nrf24l01_write_register(EN_RXADDR, config_values, 1);
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	be 01       	movw	r22, r28
     c78:	6f 5f       	subi	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	
	//Set address length as 5 bytes
	config_values[0] = address_width;
     c82:	19 83       	std	Y+1, r17	; 0x01
	nrf24l01_write_register(SETUP_AW, config_values,1);
     c84:	41 e0       	ldi	r20, 0x01	; 1
     c86:	be 01       	movw	r22, r28
     c88:	6f 5f       	subi	r22, 0xFF	; 255
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	
	//Setup a radio channel
	config_values[0] = channel;
     c92:	b9 82       	std	Y+1, r11	; 0x01
	nrf24l01_write_register(RF_CH, config_values,1);
     c94:	41 e0       	ldi	r20, 0x01	; 1
     c96:	be 01       	movw	r22, r28
     c98:	6f 5f       	subi	r22, 0xFF	; 255
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	85 e0       	ldi	r24, 0x05	; 5
     c9e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>

	//Setup in -0dB long range mode
	config_values[0] = 0x07;
     ca2:	87 e0       	ldi	r24, 0x07	; 7
     ca4:	89 83       	std	Y+1, r24	; 0x01
	nrf24l01_write_register(RF_SETUP, config_values,1);
     ca6:	41 e0       	ldi	r20, 0x01	; 1
     ca8:	be 01       	movw	r22, r28
     caa:	6f 5f       	subi	r22, 0xFF	; 255
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	
	//Setup addresses for recieve pipe 0 and tx
	nrf24l01_write_register(RX_ADDR_P0,address,address_width);
     cb4:	41 2f       	mov	r20, r17
     cb6:	b7 01       	movw	r22, r14
     cb8:	8a e0       	ldi	r24, 0x0A	; 10
     cba:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	nrf24l01_write_register(TX_ADDR,address,address_width);
     cbe:	41 2f       	mov	r20, r17
     cc0:	b7 01       	movw	r22, r14
     cc2:	80 e1       	ldi	r24, 0x10	; 16
     cc4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	
	//Setup payload width (bytes/package)
	config_values[0] = payload_width;
     cc8:	c9 82       	std	Y+1, r12	; 0x01
	nrf24l01_write_register(RX_PW_P0,config_values,1);
     cca:	41 e0       	ldi	r20, 0x01	; 1
     ccc:	be 01       	movw	r22, r28
     cce:	6f 5f       	subi	r22, 0xFF	; 255
     cd0:	7f 4f       	sbci	r23, 0xFF	; 255
     cd2:	81 e1       	ldi	r24, 0x11	; 17
     cd4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
	
	//Bootup and config
	config_values[0] = (1 << PWR_UP) | (1 << CRCO) | (1 << EN_CRC) | (1 << MASK_MAX_RT);
	
	if(mode == 0) {
     cd8:	00 23       	and	r16, r16
     cda:	a9 f0       	breq	.+42     	; 0xd06 <nrf24l01_init+0xde>
		config_values[0] |=  (1 << MASK_TX_DS) | (1 << MASK_RX_DR);
	} else {
		config_values[0] |= (1 << PRIM_RX) | (1 << MASK_TX_DS);
     cdc:	8f e3       	ldi	r24, 0x3F	; 63
     cde:	89 83       	std	Y+1, r24	; 0x01
		PORTC |= (1 << PORTC7);
     ce0:	47 9a       	sbi	0x08, 7	; 8
	}
	nrf24l01_write_register(CONFIG, config_values, 1);
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	be 01       	movw	r22, r28
     ce6:	6f 5f       	subi	r22, 0xFF	; 255
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
} 
     cf0:	0f 90       	pop	r0
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	bf 90       	pop	r11
     d04:	08 95       	ret
	
	//Bootup and config
	config_values[0] = (1 << PWR_UP) | (1 << CRCO) | (1 << EN_CRC) | (1 << MASK_MAX_RT);
	
	if(mode == 0) {
		config_values[0] |=  (1 << MASK_TX_DS) | (1 << MASK_RX_DR);
     d06:	8e e7       	ldi	r24, 0x7E	; 126
     d08:	89 83       	std	Y+1, r24	; 0x01
     d0a:	eb cf       	rjmp	.-42     	; 0xce2 <nrf24l01_init+0xba>

00000d0c <nrf24l01_transmit>:
		PORTC |= (1 << PORTC7);
	}
	nrf24l01_write_register(CONFIG, config_values, 1);
} 

void nrf24l01_transmit(uint8_t* payload, uint8_t payload_size) {
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	f8 2e       	mov	r15, r24
     d18:	09 2f       	mov	r16, r25
     d1a:	16 2f       	mov	r17, r22
	SPI_unset_RF_cs();
     d1c:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_unset_RF_cs>
	SPI_send(FLUSH_TX);
     d20:	81 ee       	ldi	r24, 0xE1	; 225
     d22:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
	SPI_set_RF_cs();
     d26:	0e 94 f3 06 	call	0xde6	; 0xde6 <SPI_set_RF_cs>
	
	SPI_unset_RF_cs();
     d2a:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_unset_RF_cs>
	SPI_send(W_TX_PAYLOAD);
     d2e:	80 ea       	ldi	r24, 0xA0	; 160
     d30:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
	for(int i = 0; i < payload_size; i++) {
     d34:	11 23       	and	r17, r17
     d36:	61 f0       	breq	.+24     	; 0xd50 <nrf24l01_transmit+0x44>
     d38:	cf 2d       	mov	r28, r15
     d3a:	d0 2f       	mov	r29, r16
     d3c:	ce 01       	movw	r24, r28
     d3e:	81 0f       	add	r24, r17
     d40:	91 1d       	adc	r25, r1
     d42:	8c 01       	movw	r16, r24
		SPI_send(payload[i]);
     d44:	89 91       	ld	r24, Y+
     d46:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
	SPI_send(FLUSH_TX);
	SPI_set_RF_cs();
	
	SPI_unset_RF_cs();
	SPI_send(W_TX_PAYLOAD);
	for(int i = 0; i < payload_size; i++) {
     d4a:	c0 17       	cp	r28, r16
     d4c:	d1 07       	cpc	r29, r17
     d4e:	d1 f7       	brne	.-12     	; 0xd44 <nrf24l01_transmit+0x38>
		SPI_send(payload[i]);
	}
	SPI_set_RF_cs();

}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
	SPI_unset_RF_cs();
	SPI_send(W_TX_PAYLOAD);
	for(int i = 0; i < payload_size; i++) {
		SPI_send(payload[i]);
	}
	SPI_set_RF_cs();
     d5a:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <SPI_set_RF_cs>

00000d5e <nrf24l01_read_register>:

}

void nrf24l01_read_register(uint8_t reg, uint8_t* data, uint8_t bytecount) {
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	c8 2f       	mov	r28, r24
     d6a:	f6 2e       	mov	r15, r22
     d6c:	07 2f       	mov	r16, r23
     d6e:	14 2f       	mov	r17, r20
	SPI_unset_RF_cs();
     d70:	0e 94 f1 06 	call	0xde2	; 0xde2 <SPI_unset_RF_cs>
	SPI_send(reg);
     d74:	8c 2f       	mov	r24, r28
     d76:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
	for(int i = 0; i < bytecount; i++) {
     d7a:	11 23       	and	r17, r17
     d7c:	71 f0       	breq	.+28     	; 0xd9a <nrf24l01_read_register+0x3c>
     d7e:	cf 2d       	mov	r28, r15
     d80:	d0 2f       	mov	r29, r16
     d82:	ce 01       	movw	r24, r28
     d84:	81 0f       	add	r24, r17
     d86:	91 1d       	adc	r25, r1
     d88:	8c 01       	movw	r16, r24
		SPI_send(NOP);
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <SPI_send>
		data[i] = SPDR;
     d90:	8e b5       	in	r24, 0x2e	; 46
     d92:	89 93       	st	Y+, r24
}

void nrf24l01_read_register(uint8_t reg, uint8_t* data, uint8_t bytecount) {
	SPI_unset_RF_cs();
	SPI_send(reg);
	for(int i = 0; i < bytecount; i++) {
     d94:	c0 17       	cp	r28, r16
     d96:	d1 07       	cpc	r29, r17
     d98:	c1 f7       	brne	.-16     	; 0xd8a <nrf24l01_read_register+0x2c>
		SPI_send(NOP);
		data[i] = SPDR;
	}
	SPI_set_RF_cs();
}
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
	SPI_send(reg);
	for(int i = 0; i < bytecount; i++) {
		SPI_send(NOP);
		data[i] = SPDR;
	}
	SPI_set_RF_cs();
     da4:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <SPI_set_RF_cs>

00000da8 <nrf24l01_reset_interrupts>:
}

void nrf24l01_reset_interrupts() {
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	1f 92       	push	r1
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	uint8_t val[1];
	val[0] = 0x70;
     db2:	80 e7       	ldi	r24, 0x70	; 112
     db4:	89 83       	std	Y+1, r24	; 0x01
	nrf24l01_write_register(STATUS,val,1);
     db6:	41 e0       	ldi	r20, 0x01	; 1
     db8:	be 01       	movw	r22, r28
     dba:	6f 5f       	subi	r22, 0xFF	; 255
     dbc:	7f 4f       	sbci	r23, 0xFF	; 255
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <nrf24l01_write_register>
}
     dc4:	0f 90       	pop	r0
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <SPI_init>:
/* Riistvaraprojekt UT 2020/21 - Rando Hinn, vastuvõtjamooduli SPI libra */


void SPI_init() {
	//EINK CS, SCK & MOSI out
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
     dcc:	84 b1       	in	r24, 0x04	; 4
     dce:	87 60       	ori	r24, 0x07	; 7
     dd0:	84 b9       	out	0x04, r24	; 4
	// RF CS
	DDRC |= (1 << DDC6);
     dd2:	3e 9a       	sbi	0x07, 6	; 7
	
	DDRB &= ~(1 << DDB3);
     dd4:	23 98       	cbi	0x04, 3	; 4
	
	SPCR|=(1<<SPE)|(1<<MSTR)|(1<<SPR0);
     dd6:	8c b5       	in	r24, 0x2c	; 44
     dd8:	81 65       	ori	r24, 0x51	; 81
     dda:	8c bd       	out	0x2c, r24	; 44
	
	//RF CS High
    PORTC |= (1 << PC6);
     ddc:	46 9a       	sbi	0x08, 6	; 8
	
	//EINK CS HIGH
	PORTB |= (1 << PB0);
     dde:	28 9a       	sbi	0x05, 0	; 5
     de0:	08 95       	ret

00000de2 <SPI_unset_RF_cs>:
}

void SPI_unset_RF_cs() {
    PORTC &= ~(1 << PINC6);
     de2:	46 98       	cbi	0x08, 6	; 8
     de4:	08 95       	ret

00000de6 <SPI_set_RF_cs>:
}

void SPI_set_RF_cs(){
    PORTC |= (1 << PINC6);
     de6:	46 9a       	sbi	0x08, 6	; 8
     de8:	08 95       	ret

00000dea <SPI_unset_EINK_cs>:
}

void SPI_unset_EINK_cs() {
	PORTB &= ~(1 << PB0);
     dea:	28 98       	cbi	0x05, 0	; 5
     dec:	08 95       	ret

00000dee <SPI_set_EINK_cs>:
}

void SPI_set_EINK_cs() {
	PORTB |= (1 << PB0);
     dee:	28 9a       	sbi	0x05, 0	; 5
     df0:	08 95       	ret

00000df2 <SPI_send>:
}

void SPI_send(uint8_t data) {
	SPDR = data;
     df2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF) ));
     df4:	0d b4       	in	r0, 0x2d	; 45
     df6:	07 fe       	sbrs	r0, 7
     df8:	fd cf       	rjmp	.-6      	; 0xdf4 <SPI_send+0x2>
     dfa:	08 95       	ret

00000dfc <main>:

int main() {
     dfc:	bf 92       	push	r11
     dfe:	cf 92       	push	r12
     e00:	df 92       	push	r13
     e02:	ef 92       	push	r14
     e04:	ff 92       	push	r15
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <main+0x14>
     e10:	00 d0       	rcall	.+0      	; 0xe12 <main+0x16>
     e12:	1f 92       	push	r1
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
                }
            }
        }
    }
    return 0;
     e18:	0d b7       	in	r16, 0x3d	; 61
     e1a:	1e b7       	in	r17, 0x3e	; 62
}

int main() {

    //DEBUG led
    DDRF = (1 << DDF0);
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	80 bb       	out	0x10, r24	; 16
	
    if(batmon_init()) {
     e20:	0e 94 6a 00 	call	0xd4	; 0xd4 <batmon_init>
     e24:	81 11       	cpse	r24, r1
     e26:	16 c0       	rjmp	.+44     	; 0xe54 <main+0x58>
                }
            }
        }
    }
    return 0;
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	1e bf       	out	0x3e, r17	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	0d bf       	out	0x3d, r16	; 61
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	08 95       	ret

    //DEBUG led
    DDRF = (1 << DDF0);
	
    if(batmon_init()) {
        batmon_config(700);
     e54:	8c eb       	ldi	r24, 0xBC	; 188
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	0e 94 ac 00 	call	0x158	; 0x158 <batmon_config>
        if(batmon_soc() > 25) { // Akut üle 25%? Läheme käima
     e5c:	0e 94 8e 01 	call	0x31c	; 0x31c <batmon_soc>
     e60:	8a 31       	cpi	r24, 0x1A	; 26
     e62:	10 f3       	brcs	.-60     	; 0xe28 <main+0x2c>
        
            // Ja tekitame timeri, millega akut kontrollida 100ms
            TIMSK1 |= (1 << OCIE1A);
     e64:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     e68:	82 60       	ori	r24, 0x02	; 2
     e6a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
            TCCR1B |= (1 << WGM12) | (1<<CS10) | (1 << CS12);
     e6e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     e72:	8d 60       	ori	r24, 0x0D	; 13
     e74:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
            OCR1A = 1562;
     e78:	8a e1       	ldi	r24, 0x1A	; 26
     e7a:	96 e0       	ldi	r25, 0x06	; 6
     e7c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e80:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
        
            //IRQ
            DDRE &= ~(1 << DDE6);
     e84:	6e 98       	cbi	0x0d, 6	; 13
            EICRB |= (1<<ISC60)|(0<<ISC61);   //INT6 falling edge
     e86:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
     e8a:	80 61       	ori	r24, 0x10	; 16
     e8c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
            EIMSK |= (1<<INT6);
     e90:	ee 9a       	sbi	0x1d, 6	; 29
            sei();
     e92:	78 94       	sei
            
            // EINK Busy
            DDRD &= ~(1 << DDD3);
     e94:	53 98       	cbi	0x0a, 3	; 10

            SPI_init();   
     e96:	0e 94 e6 06 	call	0xdcc	; 0xdcc <SPI_init>
            EINK_init();
     e9a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <EINK_init>
            EINK_wait();
     e9e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EINK_wait>
            
            uint8_t buffer[(epdwidth / 8) * HEIGHT];
     ea2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
     ea6:	86 95       	lsr	r24
     ea8:	86 95       	lsr	r24
     eaa:	86 95       	lsr	r24
     eac:	2d b7       	in	r18, 0x3d	; 61
     eae:	3e b7       	in	r19, 0x3e	; 62
     eb0:	98 e2       	ldi	r25, 0x28	; 40
     eb2:	89 9f       	mul	r24, r25
     eb4:	20 19       	sub	r18, r0
     eb6:	31 09       	sbc	r19, r1
     eb8:	11 24       	eor	r1, r1
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	3e bf       	out	0x3e, r19	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	2d bf       	out	0x3d, r18	; 61
     ec4:	2f 5f       	subi	r18, 0xFF	; 255
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	79 01       	movw	r14, r18
            clean_buffer(buffer);
     eca:	c9 01       	movw	r24, r18
     ecc:	0e 94 6b 05 	call	0xad6	; 0xad6 <clean_buffer>
            EINK_wait();
     ed0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EINK_wait>
            
            // Valgeks
            EINK_send_command(DISPLAY_REFRESH);
     ed4:	82 e1       	ldi	r24, 0x12	; 18
     ed6:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
            EINK_wait();
     eda:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EINK_wait>
     ede:	3f ef       	ldi	r19, 0xFF	; 255
     ee0:	89 e5       	ldi	r24, 0x59	; 89
     ee2:	92 e6       	ldi	r25, 0x62	; 98
     ee4:	22 e0       	ldi	r18, 0x02	; 2
     ee6:	31 50       	subi	r19, 0x01	; 1
     ee8:	80 40       	sbci	r24, 0x00	; 0
     eea:	90 40       	sbci	r25, 0x00	; 0
     eec:	20 40       	sbci	r18, 0x00	; 0
     eee:	d9 f7       	brne	.-10     	; 0xee6 <main+0xea>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <main+0xf6>
     ef2:	00 00       	nop
            _delay_ms(15000);

            //Suvaline aadress
            uint8_t address[5];
            for(int i = 0; i < 5; i++) {
                address[i] = 0x12+i;
     ef4:	82 e1       	ldi	r24, 0x12	; 18
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	83 e1       	ldi	r24, 0x13	; 19
     efa:	8a 83       	std	Y+2, r24	; 0x02
     efc:	84 e1       	ldi	r24, 0x14	; 20
     efe:	8b 83       	std	Y+3, r24	; 0x03
     f00:	85 e1       	ldi	r24, 0x15	; 21
     f02:	8c 83       	std	Y+4, r24	; 0x04
     f04:	86 e1       	ldi	r24, 0x16	; 22
     f06:	8d 83       	std	Y+5, r24	; 0x05
            }
                
            nrf24l01_init(5, address, 110, 10 ,MODE_RECIEVE);
     f08:	01 e0       	ldi	r16, 0x01	; 1
     f0a:	2a e0       	ldi	r18, 0x0A	; 10
     f0c:	4e e6       	ldi	r20, 0x6E	; 110
     f0e:	be 01       	movw	r22, r28
     f10:	6f 5f       	subi	r22, 0xFF	; 255
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	85 e0       	ldi	r24, 0x05	; 5
     f16:	0e 94 14 06 	call	0xc28	; 0xc28 <nrf24l01_init>
            nrf24l01_read_register(R_RX_PAYLOAD,(uint8_t *)data,10); // Esimesel korral peame puhvritühjendust ise tegema..
     f1a:	4a e0       	ldi	r20, 0x0A	; 10
     f1c:	64 e0       	ldi	r22, 0x04	; 4
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	81 e6       	ldi	r24, 0x61	; 97
     f22:	0e 94 af 06 	call	0xd5e	; 0xd5e <nrf24l01_read_register>
            nrf24l01_reset_interrupts();    
     f26:	0e 94 d4 06 	call	0xda8	; 0xda8 <nrf24l01_reset_interrupts>

            while(1) {
                if(data_available) {
     f2a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data_available>
     f2e:	88 23       	and	r24, r24
     f30:	e1 f3       	breq	.-8      	; 0xf2a <main+0x12e>
                    if(data[0] == 'D') {
     f32:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
     f36:	84 34       	cpi	r24, 0x44	; 68
     f38:	c9 f0       	breq	.+50     	; 0xf6c <main+0x170>
                                    EINK_draw_absolute_pixel(buffer,x,y,0);
                                }
                            }
                        }
                    } else {
                        if(data[0] == 'S') {
     f3a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
     f3e:	83 35       	cpi	r24, 0x53	; 83
     f40:	09 f4       	brne	.+2      	; 0xf44 <main+0x148>
     f42:	48 c0       	rjmp	.+144    	; 0xfd4 <main+0x1d8>
                            EINK_draw_absolute_pixel(buffer,(uint8_t)data[1],(uint8_t)data[2],1);
                        } else if(data[0] == 'C') {
     f44:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
     f48:	83 34       	cpi	r24, 0x43	; 67
     f4a:	09 f4       	brne	.+2      	; 0xf4e <main+0x152>
     f4c:	4f c0       	rjmp	.+158    	; 0xfec <main+0x1f0>
                            EINK_draw_absolute_pixel(buffer,data[1],data[2],0);
                        } else if(data[0] == 'R') {
     f4e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
     f52:	82 35       	cpi	r24, 0x52	; 82
     f54:	09 f4       	brne	.+2      	; 0xf58 <main+0x15c>
     f56:	82 c0       	rjmp	.+260    	; 0x105c <main+0x260>
                            EINK_send_command(DISPLAY_REFRESH);
                            EINK_wait();
                        } else if(data[0] == 'W') {
     f58:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data>
     f5c:	87 35       	cpi	r24, 0x57	; 87
     f5e:	09 f4       	brne	.+2      	; 0xf62 <main+0x166>
     f60:	83 c0       	rjmp	.+262    	; 0x1068 <main+0x26c>
                            clean_buffer(buffer);
                            EINK_wait();
                        }
                    }
                        
                    nrf24l01_reset_interrupts();
     f62:	0e 94 d4 06 	call	0xda8	; 0xda8 <nrf24l01_reset_interrupts>
                    data_available = 0;
     f66:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <data_available>
     f6a:	df cf       	rjmp	.-66     	; 0xf2a <main+0x12e>
            nrf24l01_reset_interrupts();    

            while(1) {
                if(data_available) {
                    if(data[0] == 'D') {
                        if(data[1] == 'B') {
     f6c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data+0x1>
     f70:	82 34       	cpi	r24, 0x42	; 66
     f72:	09 f4       	brne	.+2      	; 0xf76 <main+0x17a>
     f74:	47 c0       	rjmp	.+142    	; 0x1004 <main+0x208>
                            for(uint8_t x = 0; x < epdwidth; x++) {
                                for (uint8_t y = 0; y < HEIGHT; y++) {
                                    EINK_draw_absolute_pixel(buffer,x,y,0);
                                }
                            }
                        } else if (data[1] == 'R') {
     f76:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <data+0x1>
     f7a:	82 35       	cpi	r24, 0x52	; 82
     f7c:	91 f7       	brne	.-28     	; 0xf62 <main+0x166>
                            EINK_set_partial_red(buffer, (uint8_t)data[2], (uint8_t)data[3], epdwidth,HEIGHT);
     f7e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <data+0x3>
     f82:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <data+0x2>
     f86:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	50 e0       	ldi	r21, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	08 e2       	ldi	r16, 0x28	; 40
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	c7 01       	movw	r24, r14
     f96:	0e 94 67 03 	call	0x6ce	; 0x6ce <EINK_set_partial_red>
                            EINK_wait();
     f9a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EINK_wait>
                            for(uint8_t x = 0; x < epdwidth; x++) {
     f9e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
     fa2:	88 23       	and	r24, r24
     fa4:	f1 f2       	breq	.-68     	; 0xf62 <main+0x166>
     fa6:	b1 2c       	mov	r11, r1
     fa8:	cb 2c       	mov	r12, r11
     faa:	d1 2c       	mov	r13, r1
     fac:	00 e0       	ldi	r16, 0x00	; 0
     fae:	10 e0       	ldi	r17, 0x00	; 0
                                for (uint8_t y = 0; y < HEIGHT; y++) {
                                    EINK_draw_absolute_pixel(buffer,x,y,0);
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	a8 01       	movw	r20, r16
     fb6:	b6 01       	movw	r22, r12
     fb8:	c7 01       	movw	r24, r14
     fba:	0e 94 87 02 	call	0x50e	; 0x50e <EINK_draw_absolute_pixel>
     fbe:	0f 5f       	subi	r16, 0xFF	; 255
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
                            }
                        } else if (data[1] == 'R') {
                            EINK_set_partial_red(buffer, (uint8_t)data[2], (uint8_t)data[3], epdwidth,HEIGHT);
                            EINK_wait();
                            for(uint8_t x = 0; x < epdwidth; x++) {
                                for (uint8_t y = 0; y < HEIGHT; y++) {
     fc2:	08 32       	cpi	r16, 0x28	; 40
     fc4:	11 05       	cpc	r17, r1
     fc6:	a1 f7       	brne	.-24     	; 0xfb0 <main+0x1b4>
                                }
                            }
                        } else if (data[1] == 'R') {
                            EINK_set_partial_red(buffer, (uint8_t)data[2], (uint8_t)data[3], epdwidth,HEIGHT);
                            EINK_wait();
                            for(uint8_t x = 0; x < epdwidth; x++) {
     fc8:	b3 94       	inc	r11
     fca:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
     fce:	b8 16       	cp	r11, r24
     fd0:	58 f3       	brcs	.-42     	; 0xfa8 <main+0x1ac>
     fd2:	c7 cf       	rjmp	.-114    	; 0xf62 <main+0x166>
                                }
                            }
                        }
                    } else {
                        if(data[0] == 'S') {
                            EINK_draw_absolute_pixel(buffer,(uint8_t)data[1],(uint8_t)data[2],1);
     fd4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <data+0x2>
     fd8:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <data+0x1>
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	21 e0       	ldi	r18, 0x01	; 1
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	c7 01       	movw	r24, r14
     fe6:	0e 94 87 02 	call	0x50e	; 0x50e <EINK_draw_absolute_pixel>
     fea:	bb cf       	rjmp	.-138    	; 0xf62 <main+0x166>
                        } else if(data[0] == 'C') {
                            EINK_draw_absolute_pixel(buffer,data[1],data[2],0);
     fec:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <data+0x2>
     ff0:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <data+0x1>
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	c7 01       	movw	r24, r14
     ffe:	0e 94 87 02 	call	0x50e	; 0x50e <EINK_draw_absolute_pixel>
    1002:	af cf       	rjmp	.-162    	; 0xf62 <main+0x166>

            while(1) {
                if(data_available) {
                    if(data[0] == 'D') {
                        if(data[1] == 'B') {
                            EINK_set_partial_black(buffer, (uint8_t)data[2], (uint8_t)data[3], epdwidth,HEIGHT);
    1004:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <data+0x3>
    1008:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <data+0x2>
    100c:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <epdwidth>
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	08 e2       	ldi	r16, 0x28	; 40
    1018:	10 e0       	ldi	r17, 0x00	; 0
    101a:	c7 01       	movw	r24, r14
    101c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <EINK_set_partial_black>
                            EINK_wait();
    1020:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EINK_wait>
                            for(uint8_t x = 0; x < epdwidth; x++) {
    1024:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
    1028:	88 23       	and	r24, r24
    102a:	09 f4       	brne	.+2      	; 0x102e <main+0x232>
    102c:	9a cf       	rjmp	.-204    	; 0xf62 <main+0x166>
    102e:	b1 2c       	mov	r11, r1
    1030:	cb 2c       	mov	r12, r11
    1032:	d1 2c       	mov	r13, r1
    1034:	00 e0       	ldi	r16, 0x00	; 0
    1036:	10 e0       	ldi	r17, 0x00	; 0
                                for (uint8_t y = 0; y < HEIGHT; y++) {
                                    EINK_draw_absolute_pixel(buffer,x,y,0);
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	a8 01       	movw	r20, r16
    103e:	b6 01       	movw	r22, r12
    1040:	c7 01       	movw	r24, r14
    1042:	0e 94 87 02 	call	0x50e	; 0x50e <EINK_draw_absolute_pixel>
    1046:	0f 5f       	subi	r16, 0xFF	; 255
    1048:	1f 4f       	sbci	r17, 0xFF	; 255
                    if(data[0] == 'D') {
                        if(data[1] == 'B') {
                            EINK_set_partial_black(buffer, (uint8_t)data[2], (uint8_t)data[3], epdwidth,HEIGHT);
                            EINK_wait();
                            for(uint8_t x = 0; x < epdwidth; x++) {
                                for (uint8_t y = 0; y < HEIGHT; y++) {
    104a:	08 32       	cpi	r16, 0x28	; 40
    104c:	11 05       	cpc	r17, r1
    104e:	a1 f7       	brne	.-24     	; 0x1038 <main+0x23c>
                if(data_available) {
                    if(data[0] == 'D') {
                        if(data[1] == 'B') {
                            EINK_set_partial_black(buffer, (uint8_t)data[2], (uint8_t)data[3], epdwidth,HEIGHT);
                            EINK_wait();
                            for(uint8_t x = 0; x < epdwidth; x++) {
    1050:	b3 94       	inc	r11
    1052:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <epdwidth>
    1056:	b8 16       	cp	r11, r24
    1058:	58 f3       	brcs	.-42     	; 0x1030 <main+0x234>
    105a:	83 cf       	rjmp	.-250    	; 0xf62 <main+0x166>
                        if(data[0] == 'S') {
                            EINK_draw_absolute_pixel(buffer,(uint8_t)data[1],(uint8_t)data[2],1);
                        } else if(data[0] == 'C') {
                            EINK_draw_absolute_pixel(buffer,data[1],data[2],0);
                        } else if(data[0] == 'R') {
                            EINK_send_command(DISPLAY_REFRESH);
    105c:	82 e1       	ldi	r24, 0x12	; 18
    105e:	0e 94 a1 01 	call	0x342	; 0x342 <EINK_send_command>
                            EINK_wait();
    1062:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EINK_wait>
    1066:	7d cf       	rjmp	.-262    	; 0xf62 <main+0x166>
                        } else if(data[0] == 'W') {
                            clean_buffer(buffer);
    1068:	c7 01       	movw	r24, r14
    106a:	0e 94 6b 05 	call	0xad6	; 0xad6 <clean_buffer>
                            EINK_wait();
    106e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <EINK_wait>
    1072:	77 cf       	rjmp	.-274    	; 0xf62 <main+0x166>

00001074 <__divmodhi4>:
    1074:	97 fb       	bst	r25, 7
    1076:	07 2e       	mov	r0, r23
    1078:	16 f4       	brtc	.+4      	; 0x107e <__divmodhi4+0xa>
    107a:	00 94       	com	r0
    107c:	07 d0       	rcall	.+14     	; 0x108c <__divmodhi4_neg1>
    107e:	77 fd       	sbrc	r23, 7
    1080:	09 d0       	rcall	.+18     	; 0x1094 <__divmodhi4_neg2>
    1082:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__udivmodhi4>
    1086:	07 fc       	sbrc	r0, 7
    1088:	05 d0       	rcall	.+10     	; 0x1094 <__divmodhi4_neg2>
    108a:	3e f4       	brtc	.+14     	; 0x109a <__divmodhi4_exit>

0000108c <__divmodhi4_neg1>:
    108c:	90 95       	com	r25
    108e:	81 95       	neg	r24
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	08 95       	ret

00001094 <__divmodhi4_neg2>:
    1094:	70 95       	com	r23
    1096:	61 95       	neg	r22
    1098:	7f 4f       	sbci	r23, 0xFF	; 255

0000109a <__divmodhi4_exit>:
    109a:	08 95       	ret

0000109c <__udivmodsi4>:
    109c:	a1 e2       	ldi	r26, 0x21	; 33
    109e:	1a 2e       	mov	r1, r26
    10a0:	aa 1b       	sub	r26, r26
    10a2:	bb 1b       	sub	r27, r27
    10a4:	fd 01       	movw	r30, r26
    10a6:	0d c0       	rjmp	.+26     	; 0x10c2 <__udivmodsi4_ep>

000010a8 <__udivmodsi4_loop>:
    10a8:	aa 1f       	adc	r26, r26
    10aa:	bb 1f       	adc	r27, r27
    10ac:	ee 1f       	adc	r30, r30
    10ae:	ff 1f       	adc	r31, r31
    10b0:	a2 17       	cp	r26, r18
    10b2:	b3 07       	cpc	r27, r19
    10b4:	e4 07       	cpc	r30, r20
    10b6:	f5 07       	cpc	r31, r21
    10b8:	20 f0       	brcs	.+8      	; 0x10c2 <__udivmodsi4_ep>
    10ba:	a2 1b       	sub	r26, r18
    10bc:	b3 0b       	sbc	r27, r19
    10be:	e4 0b       	sbc	r30, r20
    10c0:	f5 0b       	sbc	r31, r21

000010c2 <__udivmodsi4_ep>:
    10c2:	66 1f       	adc	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	1a 94       	dec	r1
    10cc:	69 f7       	brne	.-38     	; 0x10a8 <__udivmodsi4_loop>
    10ce:	60 95       	com	r22
    10d0:	70 95       	com	r23
    10d2:	80 95       	com	r24
    10d4:	90 95       	com	r25
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	bd 01       	movw	r22, r26
    10dc:	cf 01       	movw	r24, r30
    10de:	08 95       	ret

000010e0 <__udivmodhi4>:
    10e0:	aa 1b       	sub	r26, r26
    10e2:	bb 1b       	sub	r27, r27
    10e4:	51 e1       	ldi	r21, 0x11	; 17
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <__udivmodhi4_ep>

000010e8 <__udivmodhi4_loop>:
    10e8:	aa 1f       	adc	r26, r26
    10ea:	bb 1f       	adc	r27, r27
    10ec:	a6 17       	cp	r26, r22
    10ee:	b7 07       	cpc	r27, r23
    10f0:	10 f0       	brcs	.+4      	; 0x10f6 <__udivmodhi4_ep>
    10f2:	a6 1b       	sub	r26, r22
    10f4:	b7 0b       	sbc	r27, r23

000010f6 <__udivmodhi4_ep>:
    10f6:	88 1f       	adc	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	5a 95       	dec	r21
    10fc:	a9 f7       	brne	.-22     	; 0x10e8 <__udivmodhi4_loop>
    10fe:	80 95       	com	r24
    1100:	90 95       	com	r25
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	08 95       	ret

00001108 <_exit>:
    1108:	f8 94       	cli

0000110a <__stop_program>:
    110a:	ff cf       	rjmp	.-2      	; 0x110a <__stop_program>
